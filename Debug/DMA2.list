
DMA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006244  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006410  08006410  00016410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006608  08006608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006610  08006610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001218  2000000c  08006624  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  08006624  00021224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f6f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c20  00000000  00000000  00031fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00034bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024840  00000000  00000000  000369e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138be  00000000  00000000  0005b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df352  00000000  00000000  0006eae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014de38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  0014de8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080063f4 	.word	0x080063f4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080063f4 	.word	0x080063f4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e50:	4a29      	ldr	r2, [pc, #164]	; (8000ef8 <MX_ADC2_Init+0xbc>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e80:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000ea2:	f000 ff03 	bl	8001cac <HAL_ADC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000eac:	f000 fbc6 	bl	800163c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000ec2:	f001 f85b 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000ecc:	f000 fbb6 	bl	800163c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_ADC2_Init+0xb8>)
 8000ede:	f001 f84d 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000ee8:	f000 fba8 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	40012100 	.word	0x40012100

08000efc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d158      	bne.n	8000fd0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    PA1     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f56:	2303      	movs	r3, #3
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f6a:	f002 f921 	bl	80031b0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f7a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fb6:	f001 fd8b 	bl	8002ad0 <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000fc0:	f000 fb3c 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40012100 	.word	0x40012100
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	20000078 	.word	0x20000078
 8000fe8:	40026440 	.word	0x40026440

08000fec <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_DAC_Init+0x60>)
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <MX_DAC_Init+0x64>)
 8000ffe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <MX_DAC_Init+0x60>)
 8001002:	f001 fb7c 	bl	80026fe <HAL_DAC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800100c:	f000 fb16 	bl	800163c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8001010:	232c      	movs	r3, #44	; 0x2c
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <MX_DAC_Init+0x60>)
 8001020:	f001 fc7c 	bl	800291c <HAL_DAC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800102a:	f000 fb07 	bl	800163c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2210      	movs	r2, #16
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_DAC_Init+0x60>)
 8001036:	f001 fc71 	bl	800291c <HAL_DAC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001040:	f000 fafc 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000138 	.word	0x20000138
 8001050:	40007400 	.word	0x40007400

08001054 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <HAL_DAC_MspInit+0x16c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 809f 	bne.w	80011b6 <HAL_DAC_MspInit+0x162>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <HAL_DAC_MspInit+0x170>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_DAC_MspInit+0x170>)
 8001082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <HAL_DAC_MspInit+0x170>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_DAC_MspInit+0x170>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_DAC_MspInit+0x170>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_DAC_MspInit+0x170>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010b0:	2330      	movs	r3, #48	; 0x30
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4841      	ldr	r0, [pc, #260]	; (80011c8 <HAL_DAC_MspInit+0x174>)
 80010c4:	f002 f874 	bl	80031b0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010ca:	4a41      	ldr	r2, [pc, #260]	; (80011d0 <HAL_DAC_MspInit+0x17c>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010d8:	2240      	movs	r2, #64	; 0x40
 80010da:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f0:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_DAC_MspInit+0x178>)
 80010fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001100:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HAL_DAC_MspInit+0x178>)
 8001104:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001108:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_DAC_MspInit+0x178>)
 800110c:	2204      	movs	r2, #4
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_DAC_MspInit+0x178>)
 8001112:	2203      	movs	r2, #3
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC8;
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_DAC_MspInit+0x178>)
 8001118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_DAC_MspInit+0x178>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001124:	4829      	ldr	r0, [pc, #164]	; (80011cc <HAL_DAC_MspInit+0x178>)
 8001126:	f001 fcd3 	bl	8002ad0 <HAL_DMA_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_DAC_MspInit+0xe0>
    {
      Error_Handler();
 8001130:	f000 fa84 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <HAL_DAC_MspInit+0x178>)
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	4a24      	ldr	r2, [pc, #144]	; (80011cc <HAL_DAC_MspInit+0x178>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <HAL_DAC_MspInit+0x184>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001148:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800114c:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 800115c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001160:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001168:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 800116c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001170:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001182:	2204      	movs	r2, #4
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001188:	2203      	movs	r2, #3
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac2.Init.MemBurst = DMA_MBURST_INC8;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 800118e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 800119c:	f001 fc98 	bl	8002ad0 <HAL_DMA_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_DAC_MspInit+0x156>
    {
      Error_Handler();
 80011a6:	f000 fa49 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_DAC_MspInit+0x180>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40007400 	.word	0x40007400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	200000d8 	.word	0x200000d8
 80011d0:	40026088 	.word	0x40026088
 80011d4:	2000014c 	.word	0x2000014c
 80011d8:	400260a0 	.word	0x400260a0

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_DMA_Init+0x78>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <MX_DMA_Init+0x78>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_DMA_Init+0x78>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_DMA_Init+0x78>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <MX_DMA_Init+0x78>)
 8001208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_DMA_Init+0x78>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2010      	movs	r0, #16
 8001220:	f001 fa37 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001224:	2010      	movs	r0, #16
 8001226:	f001 fa50 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2011      	movs	r0, #17
 8001230:	f001 fa2f 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001234:	2011      	movs	r0, #17
 8001236:	f001 fa48 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	203a      	movs	r0, #58	; 0x3a
 8001240:	f001 fa27 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001244:	203a      	movs	r0, #58	; 0x3a
 8001246:	f001 fa40 	bl	80026ca <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_GPIO_Init+0xa8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a22      	ldr	r2, [pc, #136]	; (8001300 <MX_GPIO_Init+0xa8>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_GPIO_Init+0xa8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_GPIO_Init+0xa8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <MX_GPIO_Init+0xa8>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_GPIO_Init+0xa8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_GPIO_Init+0xa8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <MX_GPIO_Init+0xa8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_GPIO_Init+0xa8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_GPIO_Init+0xa8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <MX_GPIO_Init+0xa8>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_GPIO_Init+0xa8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_GPIO_Init+0xac>)
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0xb0>)
 80012f4:	f001 ff5c 	bl	80031b0 <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	10210000 	.word	0x10210000
 8001308:	40020800 	.word	0x40020800

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001312:	f000 fc59 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001316:	f000 f851 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131a:	f7ff ff9d 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 800131e:	f7ff ff5d 	bl	80011dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001322:	f000 fbb5 	bl	8001a90 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001326:	f7ff fd89 	bl	8000e3c <MX_ADC2_Init>
  MX_DAC_Init();
 800132a:	f7ff fe5f 	bl	8000fec <MX_DAC_Init>
  MX_TIM4_Init();
 800132e:	f000 fa95 	bl	800185c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001332:	f000 fa1f 	bl	8001774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ///Muda a frequência do trigger do ADC → TIMER2
  freq_change (84,ADC_FREQ,&htim2);
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <main+0x94>)
 8001338:	f242 7110 	movw	r1, #10000	; 0x2710
 800133c:	2054      	movs	r0, #84	; 0x54
 800133e:	f000 f929 	bl	8001594 <freq_change>

  ///Muda a frequência do trigger do DAC → TIMER4
  freq_change(84,DAC_FREQ,&htim4);
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <main+0x98>)
 8001344:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001348:	2054      	movs	r0, #84	; 0x54
 800134a:	f000 f923 	bl	8001594 <freq_change>

  ///Inicialização do OC do canal 1 do TIMER2 → PA15
  ///Usado para testar a frequência
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800134e:	2100      	movs	r1, #0
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <main+0x94>)
 8001352:	f002 fed3 	bl	80040fc <HAL_TIM_OC_Start_IT>

  ///Inicialização do OC do canal 1 do TIMER4 → PB6
  ///Usado para testar a frequência
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <main+0x98>)
 800135a:	f002 fecf 	bl	80040fc <HAL_TIM_OC_Start_IT>

  ///Gera o sinal senoidal
  sine_gen(POINTS_PERIOD);
 800135e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001362:	f000 f899 	bl	8001498 <sine_gen>

  ///Gera o sinal triangular
  triangle_gen(POINTS_PERIOD);
 8001366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136a:	f000 f8ef 	bl	800154c <triangle_gen>

  ///Inicialização do DAC por meio de DMA → Canal 1: Onda Triangular → PA4
  ///Usando modo circular, então só precisa mandar iniciar uma vez
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)&triangle_val[0], POINTS_PERIOD, DAC_ALIGN_12B_R);
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <main+0x9c>)
 8001378:	2100      	movs	r1, #0
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <main+0xa0>)
 800137c:	f001 f9e2 	bl	8002744 <HAL_DAC_Start_DMA>

  ///Inicialização do DAC por meio de DMA → Canal 2: Onda Senoidal → PA5
  ///Usando modo circular, então só precisa mandar iniciar uma vez
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2,(uint32_t*)&sin_val[0], POINTS_PERIOD, DAC_ALIGN_12B_R);
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001388:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <main+0xa4>)
 800138a:	2110      	movs	r1, #16
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <main+0xa0>)
 800138e:	f001 f9d9 	bl	8002744 <HAL_DAC_Start_DMA>

  ///Inicialização da amostragem do ADC2 → PA0 e PA1
  ///Usando modo normal, então é necessário "pedir" para ele fazer de novo
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&adc_val[0],2);
 8001392:	2202      	movs	r2, #2
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <main+0xa8>)
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <main+0xac>)
 8001398:	f000 fccc 	bl	8001d34 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139c:	e7fe      	b.n	800139c <main+0x90>
 800139e:	bf00      	nop
 80013a0:	20001194 	.word	0x20001194
 80013a4:	2000114c 	.word	0x2000114c
 80013a8:	2000097c 	.word	0x2000097c
 80013ac:	20000138 	.word	0x20000138
 80013b0:	200001ac 	.word	0x200001ac
 80013b4:	20000028 	.word	0x20000028
 80013b8:	20000030 	.word	0x20000030

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2234      	movs	r2, #52	; 0x34
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 ffd4 	bl	8005378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <SystemClock_Config+0xd4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <SystemClock_Config+0xd4>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <SystemClock_Config+0xd4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemClock_Config+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <SystemClock_Config+0xd8>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001430:	2310      	movs	r3, #16
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fb10 	bl	8003a70 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001456:	f000 f8f1 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2102      	movs	r1, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f002 f82e 	bl	80034d8 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001482:	f000 f8db 	bl	800163c <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	; 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <sine_gen>:

/* USER CODE BEGIN 4 */
///Função que faz o cálculo da onda senoidal
	void sine_gen(int val_n){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
		int i;
		for (i=0; i<val_n; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e03f      	b.n	8001526 <sine_gen+0x8e>
			sin_val[i] = (1800*(1 + sin(i*2*PI/val_n)));
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fffe 	bl	80004ac <__aeabi_i2d>
 80014b0:	a324      	add	r3, pc, #144	; (adr r3, 8001544 <sine_gen+0xac>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f863 	bl	8000580 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4614      	mov	r4, r2
 80014c0:	461d      	mov	r5, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7fe fff2 	bl	80004ac <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7ff f980 	bl	80007d4 <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b17 	vmov	d7, r2, r3
 80014dc:	eeb0 0a47 	vmov.f32	s0, s14
 80014e0:	eef0 0a67 	vmov.f32	s1, s15
 80014e4:	f003 ff50 	bl	8005388 <sin>
 80014e8:	ec51 0b10 	vmov	r0, r1, d0
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <sine_gen+0xa0>)
 80014f2:	f7fe fe8f 	bl	8000214 <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <sine_gen+0xa4>)
 8001504:	f7ff f83c 	bl	8000580 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff faf8 	bl	8000b04 <__aeabi_d2uiz>
 8001514:	4603      	mov	r3, r0
 8001516:	b299      	uxth	r1, r3
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <sine_gen+0xa8>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<val_n; i++){
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	dbbb      	blt.n	80014a6 <sine_gen+0xe>
		}
	}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bdb0      	pop	{r4, r5, r7, pc}
 8001538:	3ff00000 	.word	0x3ff00000
 800153c:	409c2000 	.word	0x409c2000
 8001540:	200001ac 	.word	0x200001ac
 8001544:	fc8b007a 	.word	0xfc8b007a
 8001548:	400921fa 	.word	0x400921fa

0800154c <triangle_gen>:

///Função que faz o cálculo da onda triangular
	void triangle_gen(int val_n){
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
		int i;
		for(i=0; i<val_n; i++){
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e00f      	b.n	800157a <triangle_gen+0x2e>
			triangle_val[i] = i*4000/val_n;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	fb92 f3f3 	sdiv	r3, r2, r3
 800156a:	b299      	uxth	r1, r3
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <triangle_gen+0x44>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<val_n; i++){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbeb      	blt.n	800155a <triangle_gen+0xe>
		}
	}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	2000097c 	.word	0x2000097c

08001594 <freq_change>:

///Função que calcula o novo valor da frequência quando mudar o o define de DAC_FREQ ou ADC_FREQ, já que ela é ajustável como pede no exercício
	void freq_change(uint16_t PSC, uint32_t FREQ, TIM_HandleTypeDef* htim){
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	81fb      	strh	r3, [r7, #14]
		///Primeiro calcula o valor do ARR
		int ARR = (84000000/(PSC*FREQ))-1;
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <freq_change+0x64>)
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
		if(ARR>65000){ ///Se o valor calculado de ARR passar de 64999, que é o maximo que ele pode ter
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80015ba:	4293      	cmp	r3, r2
 80015bc:	dd0b      	ble.n	80015d6 <freq_change+0x42>
			PSC = 1291; ///Estabelece um valor fixo para o PSC
 80015be:	f240 530b 	movw	r3, #1291	; 0x50b
 80015c2:	81fb      	strh	r3, [r7, #14]
			ARR = (84000000/(PSC*FREQ))-1; ///e calcula o ARR novamente
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <freq_change+0x64>)
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
		}
		__HAL_TIM_SET_PRESCALER(htim, PSC); ///seta o novo valor de PSC
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	89fa      	ldrh	r2, [r7, #14]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_AUTORELOAD(htim, ARR); ///seta o novo valor de ARR
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	60da      	str	r2, [r3, #12]
	}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	0501bd00 	.word	0x0501bd00

080015fc <HAL_ADC_ConvCpltCallback>:
	/**
	 * Essa função significa que a conversão está completa e gera uma interrupção
	 * Quando o ADC mandar os valores por DMA para a memória, vai gerar uma interrupção
	 * Com essa interrupção, por estar no modo normal, é preciso "pedir" para que o DMA faça esse processo novamente
	 */
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
		ch0 = adc_val[IN0]; ///salva os valores do canal 0 do ADC na variável ch0
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_ADC_ConvCpltCallback+0x30>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_ADC_ConvCpltCallback+0x34>)
 800160c:	801a      	strh	r2, [r3, #0]
		ch1 = adc_val[IN1]; ///salva os valores do canal 1 do ADC na variável ch1
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_ADC_ConvCpltCallback+0x30>)
 8001610:	885b      	ldrh	r3, [r3, #2]
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_ADC_ConvCpltCallback+0x38>)
 8001616:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start_DMA(&hadc2, &adc_val[0], 2); ///inicializa novamente fazer uma nova conversão e enviar para a memória
 8001618:	2202      	movs	r2, #2
 800161a:	4904      	ldr	r1, [pc, #16]	; (800162c <HAL_ADC_ConvCpltCallback+0x30>)
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <HAL_ADC_ConvCpltCallback+0x3c>)
 800161e:	f000 fb89 	bl	8001d34 <HAL_ADC_Start_DMA>
	}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000028 	.word	0x20000028
 8001630:	2000002c 	.word	0x2000002c
 8001634:	2000002e 	.word	0x2000002e
 8001638:	20000030 	.word	0x20000030

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_MspInit+0x4c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001686:	2007      	movs	r0, #7
 8001688:	f000 fff8 	bl	800267c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800169c:	e7fe      	b.n	800169c <NMI_Handler+0x4>

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 fac2 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA1_Stream5_IRQHandler+0x10>)
 80016f2:	f001 faf3 	bl	8002cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000d8 	.word	0x200000d8

08001700 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Stream6_IRQHandler+0x10>)
 8001706:	f001 fae9 	bl	8002cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000014c 	.word	0x2000014c

08001714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM2_IRQHandler+0x10>)
 800171a:	f002 fdfd 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20001194 	.word	0x20001194

08001728 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM4_IRQHandler+0x10>)
 800172e:	f002 fdf3 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000114c 	.word	0x2000114c

0800173c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA2_Stream2_IRQHandler+0x10>)
 8001742:	f001 facb 	bl	8002cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000078 	.word	0x20000078

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017ae:	2253      	movs	r2, #83	; 0x53
 80017b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017ba:	2231      	movs	r2, #49	; 0x31
 80017bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ca:	4823      	ldr	r0, [pc, #140]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017cc:	f002 fbee 	bl	8003fac <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80017d6:	f7ff ff31 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e4:	4619      	mov	r1, r3
 80017e6:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017e8:	f002 fef6 	bl	80045d8 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80017f2:	f7ff ff23 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <MX_TIM2_Init+0xe4>)
 80017f8:	f002 fc27 	bl	800404a <HAL_TIM_OC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001802:	f7ff ff1b 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001806:	2320      	movs	r3, #32
 8001808:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4619      	mov	r1, r3
 8001814:	4810      	ldr	r0, [pc, #64]	; (8001858 <MX_TIM2_Init+0xe4>)
 8001816:	f003 fae5 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001820:	f7ff ff0c 	bl	800163c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001824:	2330      	movs	r3, #48	; 0x30
 8001826:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM2_Init+0xe4>)
 800183c:	f002 fe74 	bl	8004528 <HAL_TIM_OC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001846:	f7ff fef9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM2_Init+0xe4>)
 800184c:	f000 f8c0 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3738      	adds	r7, #56	; 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20001194 	.word	0x20001194

0800185c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	f107 0320 	add.w	r3, r7, #32
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <MX_TIM4_Init+0xe4>)
 800188e:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <MX_TIM4_Init+0xe8>)
 8001890:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MX_TIM4_Init+0xe4>)
 8001894:	2253      	movs	r2, #83	; 0x53
 8001896:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <MX_TIM4_Init+0xe4>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018a0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80018a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018b2:	4823      	ldr	r0, [pc, #140]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018b4:	f002 fb7a 	bl	8003fac <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018be:	f7ff febd 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018cc:	4619      	mov	r1, r3
 80018ce:	481c      	ldr	r0, [pc, #112]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018d0:	f002 fe82 	bl	80045d8 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018da:	f7ff feaf 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80018de:	4818      	ldr	r0, [pc, #96]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018e0:	f002 fbb3 	bl	800404a <HAL_TIM_OC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018ea:	f7ff fea7 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ee:	2320      	movs	r3, #32
 80018f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	4619      	mov	r1, r3
 80018fc:	4810      	ldr	r0, [pc, #64]	; (8001940 <MX_TIM4_Init+0xe4>)
 80018fe:	f003 fa71 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001908:	f7ff fe98 	bl	800163c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM4_Init+0xe4>)
 8001924:	f002 fe00 	bl	8004528 <HAL_TIM_OC_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800192e:	f7ff fe85 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM4_Init+0xe4>)
 8001934:	f000 f84c 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 8001938:	bf00      	nop
 800193a:	3738      	adds	r7, #56	; 0x38
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000114c 	.word	0x2000114c
 8001944:	40000800 	.word	0x40000800

08001948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001958:	d116      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_TIM_Base_MspInit+0x80>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_TIM_Base_MspInit+0x80>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_TIM_Base_MspInit+0x80>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	201c      	movs	r0, #28
 800197c:	f000 fe89 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001980:	201c      	movs	r0, #28
 8001982:	f000 fea2 	bl	80026ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001986:	e01a      	b.n	80019be <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_TIM_Base_MspInit+0x84>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d115      	bne.n	80019be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_TIM_Base_MspInit+0x80>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_TIM_Base_MspInit+0x80>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_TIM_Base_MspInit+0x80>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201e      	movs	r0, #30
 80019b4:	f000 fe6d 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019b8:	201e      	movs	r0, #30
 80019ba:	f000 fe86 	bl	80026ca <HAL_NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40000800 	.word	0x40000800

080019d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d11f      	bne.n	8001a32 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_TIM_MspPostInit+0xb0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_TIM_MspPostInit+0xb0>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_TIM_MspPostInit+0xb0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4816      	ldr	r0, [pc, #88]	; (8001a84 <HAL_TIM_MspPostInit+0xb4>)
 8001a2c:	f001 fbc0 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a30:	e022      	b.n	8001a78 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_TIM_MspPostInit+0xb8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d11d      	bne.n	8001a78 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_TIM_MspPostInit+0xb0>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_TIM_MspPostInit+0xb0>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_TIM_MspPostInit+0xb0>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a58:	2340      	movs	r3, #64	; 0x40
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_TIM_MspPostInit+0xbc>)
 8001a74:	f001 fb9c 	bl	80031b0 <HAL_GPIO_Init>
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40000800 	.word	0x40000800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_USART2_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f003 fa1c 	bl	8004f04 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f7ff fdb3 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200011dc 	.word	0x200011dc
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_UART_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12b      	bne.n	8001b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b5a:	f001 fb29 	bl	80031b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7a:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b90:	4c0b      	ldr	r4, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b9e:	f7ff fdd7 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f003 fbc5 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff fbb1 	bl	800130c <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bb8:	08006618 	.word	0x08006618
  ldr r2, =_sbss
 8001bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bc0:	20001224 	.word	0x20001224

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <HAL_Init+0x40>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_Init+0x40>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_Init+0x40>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 fd43 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fd24 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fd5b 	bl	80026e6 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 fd23 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20001220 	.word	0x20001220

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20001220 	.word	0x20001220

08001cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e033      	b.n	8001d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f916 	bl	8000efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf2:	f023 0302 	bic.w	r3, r3, #2
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fa6e 	bl	80021e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Start_DMA+0x1e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0e9      	b.n	8001f26 <HAL_ADC_Start_DMA+0x1f2>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d018      	beq.n	8001d9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_ADC_Start_DMA+0x1fc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6d      	ldr	r2, [pc, #436]	; (8001f34 <HAL_ADC_Start_DMA+0x200>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9a      	lsrs	r2, r3, #18
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da8:	d107      	bne.n	8001dba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 80a1 	bne.w	8001f0c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_ADC_Start_DMA+0x204>)
 8001e28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a43      	ldr	r2, [pc, #268]	; (8001f3c <HAL_ADC_Start_DMA+0x208>)
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_ADC_Start_DMA+0x20c>)
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_ADC_Start_DMA+0x210>)
 8001e40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	334c      	adds	r3, #76	; 0x4c
 8001e76:	4619      	mov	r1, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f000 fed6 	bl	8002c2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d12a      	bne.n	8001ee2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_ADC_Start_DMA+0x214>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d015      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0x18e>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_ADC_Start_DMA+0x218>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_Start_DMA+0x178>
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_ADC_Start_DMA+0x204>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_ADC_Start_DMA+0x21c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d136      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_ADC_Start_DMA+0x204>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d130      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d129      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e020      	b.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_ADC_Start_DMA+0x214>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d11b      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d114      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e00b      	b.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83
 8001f38:	40012300 	.word	0x40012300
 8001f3c:	080023d9 	.word	0x080023d9
 8001f40:	08002493 	.word	0x08002493
 8001f44:	080024af 	.word	0x080024af
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	40012100 	.word	0x40012100
 8001f50:	40012200 	.word	0x40012200

08001f54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e113      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x244>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d925      	bls.n	8001ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4403      	add	r3, r0
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	e022      	b.n	800203a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	2207      	movs	r2, #7
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4403      	add	r3, r0
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d824      	bhi.n	800208c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b05      	subs	r3, #5
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b05      	subs	r3, #5
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	e04c      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d824      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b23      	subs	r3, #35	; 0x23
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b23      	subs	r3, #35	; 0x23
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
 80020dc:	e023      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b41      	subs	r3, #65	; 0x41
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_ADC_ConfigChannel+0x250>)
 8002128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <HAL_ADC_ConfigChannel+0x254>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d10f      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d10b      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_ADC_ConfigChannel+0x254>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12b      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_ADC_ConfigChannel+0x258>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x1f4>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b11      	cmp	r3, #17
 800216e:	d122      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <HAL_ADC_ConfigChannel+0x258>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d111      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_ADC_ConfigChannel+0x260>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9a      	lsrs	r2, r3, #18
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40012300 	.word	0x40012300
 80021d0:	40012000 	.word	0x40012000
 80021d4:	10000012 	.word	0x10000012
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <ADC_Init+0x1f0>)
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <ADC_Init+0x1f4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	e00f      	b.n	80022de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0202 	bic.w	r2, r2, #2
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e1b      	ldrb	r3, [r3, #24]
 80022f8:	005a      	lsls	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800232a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	3b01      	subs	r3, #1
 8002338:	035a      	lsls	r2, r3, #13
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e007      	b.n	8002354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	3b01      	subs	r3, #1
 8002370:	051a      	lsls	r2, r3, #20
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002396:	025a      	lsls	r2, r3, #9
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	029a      	lsls	r2, r3, #10
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012300 	.word	0x40012300
 80023d4:	0f000001 	.word	0x0f000001

080023d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d13c      	bne.n	800246c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12b      	bne.n	8002464 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d127      	bne.n	8002464 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800242c:	2b00      	cmp	r3, #0
 800242e:	d119      	bne.n	8002464 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0220 	bic.w	r2, r2, #32
 800243e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff f8c9 	bl	80015fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800246a:	e00e      	b.n	800248a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fd75 	bl	8001f68 <HAL_ADC_ErrorCallback>
}
 800247e:	e004      	b.n	800248a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff fd57 	bl	8001f54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f043 0204 	orr.w	r2, r3, #4
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fd4a 	bl	8001f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <__NVIC_EnableIRQ+0x38>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	; (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff29 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff3e 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff8e 	bl	80025d0 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5d 	bl	800257c <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff31 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa2 	bl	8002638 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e014      	b.n	800273a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fe fc97 	bl	8001054 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	795b      	ldrb	r3, [r3, #5]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_DAC_Start_DMA+0x22>
 8002762:	2302      	movs	r3, #2
 8002764:	e0ab      	b.n	80028be <HAL_DAC_Start_DMA+0x17a>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2202      	movs	r2, #2
 8002770:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d12f      	bne.n	80027d8 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_DAC_Start_DMA+0x184>)
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_DAC_Start_DMA+0x188>)
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_DAC_Start_DMA+0x18c>)
 800278e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800279e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d013      	beq.n	80027ce <HAL_DAC_Start_DMA+0x8a>
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d845      	bhi.n	8002838 <HAL_DAC_Start_DMA+0xf4>
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_DAC_Start_DMA+0x76>
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d005      	beq.n	80027c4 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80027b8:	e03e      	b.n	8002838 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3308      	adds	r3, #8
 80027c0:	613b      	str	r3, [r7, #16]
        break;
 80027c2:	e03c      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	613b      	str	r3, [r7, #16]
        break;
 80027cc:	e037      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3310      	adds	r3, #16
 80027d4:	613b      	str	r3, [r7, #16]
        break;
 80027d6:	e032      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a3d      	ldr	r2, [pc, #244]	; (80028d4 <HAL_DAC_Start_DMA+0x190>)
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a3c      	ldr	r2, [pc, #240]	; (80028d8 <HAL_DAC_Start_DMA+0x194>)
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <HAL_DAC_Start_DMA+0x198>)
 80027ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027fe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d013      	beq.n	800282e <HAL_DAC_Start_DMA+0xea>
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d817      	bhi.n	800283c <HAL_DAC_Start_DMA+0xf8>
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_DAC_Start_DMA+0xd6>
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d005      	beq.n	8002824 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002818:	e010      	b.n	800283c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	613b      	str	r3, [r7, #16]
        break;
 8002822:	e00c      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3318      	adds	r3, #24
 800282a:	613b      	str	r3, [r7, #16]
        break;
 800282c:	e007      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	331c      	adds	r3, #28
 8002834:	613b      	str	r3, [r7, #16]
        break;
 8002836:	e002      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002838:	bf00      	nop
 800283a:	e000      	b.n	800283e <HAL_DAC_Start_DMA+0xfa>
        break;
 800283c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d111      	bne.n	8002868 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002852:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6898      	ldr	r0, [r3, #8]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	f000 f9e5 	bl	8002c2c <HAL_DMA_Start_IT>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]
 8002866:	e010      	b.n	800288a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002876:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68d8      	ldr	r0, [r3, #12]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	f000 f9d3 	bl	8002c2c <HAL_DMA_Start_IT>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e005      	b.n	80028bc <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	080029bb 	.word	0x080029bb
 80028cc:	080029dd 	.word	0x080029dd
 80028d0:	080029f9 	.word	0x080029f9
 80028d4:	08002a63 	.word	0x08002a63
 80028d8:	08002a85 	.word	0x08002a85
 80028dc:	08002aa1 	.word	0x08002aa1

080028e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	795b      	ldrb	r3, [r3, #5]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_DAC_ConfigChannel+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e03c      	b.n	80029ae <HAL_DAC_ConfigChannel+0x92>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4013      	ands	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	22c0      	movs	r2, #192	; 0xc0
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff89 	bl	80028e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	711a      	strb	r2, [r3, #4]
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff82 	bl	80028f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff78 	bl	8002908 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	711a      	strb	r2, [r3, #4]
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff ffd8 	bl	8002a26 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	711a      	strb	r2, [r3, #4]
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ffd1 	bl	8002a3a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff ffc7 	bl	8002a4e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	711a      	strb	r2, [r3, #4]
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff f8da 	bl	8001c94 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e099      	b.n	8002c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0c:	e00f      	b.n	8002b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0e:	f7ff f8c1 	bl	8001c94 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d908      	bls.n	8002b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e078      	b.n	8002c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e8      	bne.n	8002b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <HAL_DMA_Init+0x158>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d107      	bne.n	8002b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	4313      	orrs	r3, r2
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0307 	bic.w	r3, r3, #7
 8002bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d117      	bne.n	8002bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa6f 	bl	80030b8 <DMA_CheckFifoParam>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e016      	b.n	8002c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa26 	bl	800304c <DMA_CalcBaseAndBitshift>
 8002c00:	4603      	mov	r3, r0
 8002c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	223f      	movs	r2, #63	; 0x3f
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	f010803f 	.word	0xf010803f

08002c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_DMA_Start_IT+0x26>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e040      	b.n	8002cd4 <HAL_DMA_Start_IT+0xa8>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12f      	bne.n	8002cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f9b8 	bl	8002ff0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	223f      	movs	r2, #63	; 0x3f
 8002c86:	409a      	lsls	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0216 	orr.w	r2, r2, #22
 8002c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0208 	orr.w	r2, r2, #8
 8002cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e005      	b.n	8002cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_DMA_IRQHandler+0x258>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a92      	ldr	r2, [pc, #584]	; (8002f38 <HAL_DMA_IRQHandler+0x25c>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2208      	movs	r2, #8
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01a      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0204 	bic.w	r2, r2, #4
 8002d2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	2208      	movs	r2, #8
 8002d36:	409a      	lsls	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	2204      	movs	r2, #4
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	2204      	movs	r2, #4
 8002da2:	409a      	lsls	r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f043 0204 	orr.w	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2210      	movs	r2, #16
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d043      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d03c      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d018      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d024      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
 8002e0a:	e01f      	b.n	8002e4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01b      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
 8002e1c:	e016      	b.n	8002e4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0208 	bic.w	r2, r2, #8
 8002e3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	2220      	movs	r2, #32
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 808e 	beq.w	8002f7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8086 	beq.w	8002f7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2220      	movs	r2, #32
 8002e74:	409a      	lsls	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d136      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0216 	bic.w	r2, r2, #22
 8002e94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0x1da>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d07d      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
        }
        return;
 8002ef2:	e078      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01c      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d030      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
 8002f20:	e02b      	b.n	8002f7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d027      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	e022      	b.n	8002f7a <HAL_DMA_IRQHandler+0x29e>
 8002f34:	20000000 	.word	0x20000000
 8002f38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0210 	bic.w	r2, r2, #16
 8002f58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d032      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d022      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2205      	movs	r2, #5
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d307      	bcc.n	8002fc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f2      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x2ca>
 8002fc0:	e000      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e000      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fe6:	bf00      	nop
    }
  }
}
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop

08002ff0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800300c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d108      	bne.n	8003030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800302e:	e007      	b.n	8003040 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3b10      	subs	r3, #16
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <DMA_CalcBaseAndBitshift+0x64>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003066:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d909      	bls.n	800308e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	1d1a      	adds	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	; 0x58
 800308c:	e007      	b.n	800309e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	aaaaaaab 	.word	0xaaaaaaab
 80030b4:	08006428 	.word	0x08006428

080030b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11f      	bne.n	8003112 <DMA_CheckFifoParam+0x5a>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d856      	bhi.n	8003186 <DMA_CheckFifoParam+0xce>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <DMA_CheckFifoParam+0x28>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	08003103 	.word	0x08003103
 80030e8:	080030f1 	.word	0x080030f1
 80030ec:	08003187 	.word	0x08003187
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d046      	beq.n	800318a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e043      	b.n	800318a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800310a:	d140      	bne.n	800318e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e03d      	b.n	800318e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	d121      	bne.n	8003160 <DMA_CheckFifoParam+0xa8>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d837      	bhi.n	8003192 <DMA_CheckFifoParam+0xda>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <DMA_CheckFifoParam+0x70>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	08003139 	.word	0x08003139
 800312c:	0800313f 	.word	0x0800313f
 8003130:	08003139 	.word	0x08003139
 8003134:	08003151 	.word	0x08003151
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	e030      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d025      	beq.n	8003196 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e022      	b.n	8003196 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003158:	d11f      	bne.n	800319a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800315e:	e01c      	b.n	800319a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d903      	bls.n	800316e <DMA_CheckFifoParam+0xb6>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d003      	beq.n	8003174 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800316c:	e018      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
      break;
 8003172:	e015      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e00b      	b.n	800319e <DMA_CheckFifoParam+0xe6>
      break;
 8003186:	bf00      	nop
 8003188:	e00a      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e008      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e006      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003192:	bf00      	nop
 8003194:	e004      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
    }
  } 
  
  return status; 
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e165      	b.n	8003498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8154 	bne.w	8003492 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80ae 	beq.w	8003492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_GPIO_Init+0x300>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a5c      	ldr	r2, [pc, #368]	; (80034b0 <HAL_GPIO_Init+0x300>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b5a      	ldr	r3, [pc, #360]	; (80034b0 <HAL_GPIO_Init+0x300>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_GPIO_Init+0x308>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x21a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <HAL_GPIO_Init+0x30c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x216>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4d      	ldr	r2, [pc, #308]	; (80034c0 <HAL_GPIO_Init+0x310>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_GPIO_Init+0x314>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x20e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4b      	ldr	r2, [pc, #300]	; (80034c8 <HAL_GPIO_Init+0x318>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x20a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_GPIO_Init+0x31c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x206>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a49      	ldr	r2, [pc, #292]	; (80034d0 <HAL_GPIO_Init+0x320>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x202>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e00c      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e00a      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	4093      	lsls	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033dc:	4935      	ldr	r1, [pc, #212]	; (80034b4 <HAL_GPIO_Init+0x304>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_GPIO_Init+0x324>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340e:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800348c:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	f67f ae96 	bls.w	80031cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cc      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d90c      	bls.n	8003514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d044      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d119      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d003      	beq.n	8003596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e067      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4934      	ldr	r1, [pc, #208]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c8:	f7fe fb64 	bl	8001c94 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fe fb60 	bl	8001c94 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20c      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f855 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fac4 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00
 8003694:	40023800 	.word	0x40023800
 8003698:	08006410 	.word	0x08006410
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036c0:	f7ff fff0 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0a9b      	lsrs	r3, r3, #10
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08006420 	.word	0x08006420

080036e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e8:	f7ff ffdc 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	0b5b      	lsrs	r3, r3, #13
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	08006420 	.word	0x08006420

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b088      	sub	sp, #32
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003728:	4bce      	ldr	r3, [pc, #824]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b0c      	cmp	r3, #12
 8003732:	f200 818d 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x344>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <HAL_RCC_GetSysClockFreq+0x30>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	08003771 	.word	0x08003771
 8003740:	08003a51 	.word	0x08003a51
 8003744:	08003a51 	.word	0x08003a51
 8003748:	08003a51 	.word	0x08003a51
 800374c:	08003777 	.word	0x08003777
 8003750:	08003a51 	.word	0x08003a51
 8003754:	08003a51 	.word	0x08003a51
 8003758:	08003a51 	.word	0x08003a51
 800375c:	0800377d 	.word	0x0800377d
 8003760:	08003a51 	.word	0x08003a51
 8003764:	08003a51 	.word	0x08003a51
 8003768:	08003a51 	.word	0x08003a51
 800376c:	080038f1 	.word	0x080038f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4bbd      	ldr	r3, [pc, #756]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003772:	61bb      	str	r3, [r7, #24]
       break;
 8003774:	e16f      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003776:	4bbd      	ldr	r3, [pc, #756]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x360>)
 8003778:	61bb      	str	r3, [r7, #24]
      break;
 800377a:	e16c      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800377c:	4bb9      	ldr	r3, [pc, #740]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003784:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003786:	4bb7      	ldr	r3, [pc, #732]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d053      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4bb4      	ldr	r3, [pc, #720]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	461a      	mov	r2, r3
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	ea02 0400 	and.w	r4, r2, r0
 80037aa:	603c      	str	r4, [r7, #0]
 80037ac:	400b      	ands	r3, r1
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037b4:	4620      	mov	r0, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	014b      	lsls	r3, r1, #5
 80037c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037c6:	0142      	lsls	r2, r0, #5
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	4623      	mov	r3, r4
 80037ce:	1ac0      	subs	r0, r0, r3
 80037d0:	462b      	mov	r3, r5
 80037d2:	eb61 0103 	sbc.w	r1, r1, r3
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	018b      	lsls	r3, r1, #6
 80037e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037e4:	0182      	lsls	r2, r0, #6
 80037e6:	1a12      	subs	r2, r2, r0
 80037e8:	eb63 0301 	sbc.w	r3, r3, r1
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	00d9      	lsls	r1, r3, #3
 80037f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037fa:	00d0      	lsls	r0, r2, #3
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4621      	mov	r1, r4
 8003802:	1852      	adds	r2, r2, r1
 8003804:	4629      	mov	r1, r5
 8003806:	eb43 0101 	adc.w	r1, r3, r1
 800380a:	460b      	mov	r3, r1
 800380c:	f04f 0000 	mov.w	r0, #0
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	0259      	lsls	r1, r3, #9
 8003816:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800381a:	0250      	lsls	r0, r2, #9
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	461a      	mov	r2, r3
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	f7fd f98a 	bl	8000b44 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	e04c      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b8a      	ldr	r3, [pc, #552]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	461a      	mov	r2, r3
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	ea02 0a00 	and.w	sl, r2, r0
 8003852:	ea03 0b01 	and.w	fp, r3, r1
 8003856:	4650      	mov	r0, sl
 8003858:	4659      	mov	r1, fp
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	014b      	lsls	r3, r1, #5
 8003864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003868:	0142      	lsls	r2, r0, #5
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	ebb0 000a 	subs.w	r0, r0, sl
 8003872:	eb61 010b 	sbc.w	r1, r1, fp
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	018b      	lsls	r3, r1, #6
 8003880:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003884:	0182      	lsls	r2, r0, #6
 8003886:	1a12      	subs	r2, r2, r0
 8003888:	eb63 0301 	sbc.w	r3, r3, r1
 800388c:	f04f 0000 	mov.w	r0, #0
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	00d9      	lsls	r1, r3, #3
 8003896:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800389a:	00d0      	lsls	r0, r2, #3
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	eb12 020a 	adds.w	r2, r2, sl
 80038a4:	eb43 030b 	adc.w	r3, r3, fp
 80038a8:	f04f 0000 	mov.w	r0, #0
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	0299      	lsls	r1, r3, #10
 80038b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038b6:	0290      	lsls	r0, r2, #10
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f7fd f93c 	bl	8000b44 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d4:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	61bb      	str	r3, [r7, #24]
      break;
 80038ee:	e0b2      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f0:	4b5c      	ldr	r3, [pc, #368]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038fa:	4b5a      	ldr	r3, [pc, #360]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d04d      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003906:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	461a      	mov	r2, r3
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	ea02 0800 	and.w	r8, r2, r0
 800391e:	ea03 0901 	and.w	r9, r3, r1
 8003922:	4640      	mov	r0, r8
 8003924:	4649      	mov	r1, r9
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	014b      	lsls	r3, r1, #5
 8003930:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003934:	0142      	lsls	r2, r0, #5
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	ebb0 0008 	subs.w	r0, r0, r8
 800393e:	eb61 0109 	sbc.w	r1, r1, r9
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	018b      	lsls	r3, r1, #6
 800394c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003950:	0182      	lsls	r2, r0, #6
 8003952:	1a12      	subs	r2, r2, r0
 8003954:	eb63 0301 	sbc.w	r3, r3, r1
 8003958:	f04f 0000 	mov.w	r0, #0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	00d9      	lsls	r1, r3, #3
 8003962:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003966:	00d0      	lsls	r0, r2, #3
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	eb12 0208 	adds.w	r2, r2, r8
 8003970:	eb43 0309 	adc.w	r3, r3, r9
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	0259      	lsls	r1, r3, #9
 800397e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003982:	0250      	lsls	r0, r2, #9
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	461a      	mov	r2, r3
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	f7fd f8d6 	bl	8000b44 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e04a      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	461a      	mov	r2, r3
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	ea02 0400 	and.w	r4, r2, r0
 80039ba:	ea03 0501 	and.w	r5, r3, r1
 80039be:	4620      	mov	r0, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	014b      	lsls	r3, r1, #5
 80039cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039d0:	0142      	lsls	r2, r0, #5
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	1b00      	subs	r0, r0, r4
 80039d8:	eb61 0105 	sbc.w	r1, r1, r5
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	018b      	lsls	r3, r1, #6
 80039e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039ea:	0182      	lsls	r2, r0, #6
 80039ec:	1a12      	subs	r2, r2, r0
 80039ee:	eb63 0301 	sbc.w	r3, r3, r1
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	00d9      	lsls	r1, r3, #3
 80039fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a00:	00d0      	lsls	r0, r2, #3
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	1912      	adds	r2, r2, r4
 8003a08:	eb45 0303 	adc.w	r3, r5, r3
 8003a0c:	f04f 0000 	mov.w	r0, #0
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	0299      	lsls	r1, r3, #10
 8003a16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a1a:	0290      	lsls	r0, r2, #10
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	f7fd f88a 	bl	8000b44 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4613      	mov	r3, r2
 8003a36:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	0f1b      	lsrs	r3, r3, #28
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	61bb      	str	r3, [r7, #24]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a52:	61bb      	str	r3, [r7, #24]
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	69bb      	ldr	r3, [r7, #24]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e28d      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8083 	beq.w	8003b96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a90:	4b94      	ldr	r3, [pc, #592]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d019      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a9c:	4b91      	ldr	r3, [pc, #580]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003aa8:	4b8e      	ldr	r3, [pc, #568]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d112      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b84      	ldr	r3, [pc, #528]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x124>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e25a      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x90>
 8003af2:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7b      	ldr	r2, [pc, #492]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xcc>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0xb4>
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a75      	ldr	r2, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b73      	ldr	r3, [pc, #460]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a72      	ldr	r2, [pc, #456]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xcc>
 8003b24:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a6e      	ldr	r2, [pc, #440]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b6c      	ldr	r3, [pc, #432]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a6b      	ldr	r2, [pc, #428]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe f8a6 	bl	8001c94 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f8a2 	bl	8001c94 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e21f      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xdc>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f892 	bl	8001c94 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe f88e 	bl	8001c94 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e20b      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	4b57      	ldr	r3, [pc, #348]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x104>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d06f      	beq.n	8003c82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ba2:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bae:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d105      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x186>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1d3      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4937      	ldr	r1, [pc, #220]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_OscConfig+0x278>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe f83b 	bl	8001c94 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe f837 	bl	8001c94 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1b4      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4925      	ldr	r1, [pc, #148]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <HAL_RCC_OscConfig+0x278>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe f81a 	bl	8001c94 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fe f816 	bl	8001c94 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e193      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d036      	beq.n	8003cfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_RCC_OscConfig+0x27c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd fffa 	bl	8001c94 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd fff6 	bl	8001c94 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e173      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x234>
 8003cc2:	e01b      	b.n	8003cfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_OscConfig+0x27c>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd ffe3 	bl	8001c94 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	e00e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fd ffdf 	bl	8001c94 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d907      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e15c      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470000 	.word	0x42470000
 8003cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ea      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8097 	beq.w	8003e38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b83      	ldr	r3, [pc, #524]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a7e      	ldr	r2, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b7c      	ldr	r3, [pc, #496]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <HAL_RCC_OscConfig+0x4b0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d118      	bne.n	8003d78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b76      	ldr	r3, [pc, #472]	; (8003f20 <HAL_RCC_OscConfig+0x4b0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a75      	ldr	r2, [pc, #468]	; (8003f20 <HAL_RCC_OscConfig+0x4b0>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fd ff9f 	bl	8001c94 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fd ff9b 	bl	8001c94 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e118      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <HAL_RCC_OscConfig+0x4b0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x31e>
 8003d80:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	e01c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x358>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x340>
 8003d96:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a60      	ldr	r2, [pc, #384]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6713      	str	r3, [r2, #112]	; 0x70
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x358>
 8003db0:	4b5a      	ldr	r3, [pc, #360]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a59      	ldr	r2, [pc, #356]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a56      	ldr	r2, [pc, #344]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003dc2:	f023 0304 	bic.w	r3, r3, #4
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd ff60 	bl	8001c94 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd ff5c 	bl	8001c94 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0d7      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	4b4b      	ldr	r3, [pc, #300]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0ee      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x368>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fd ff4a 	bl	8001c94 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd ff46 	bl	8001c94 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0c1      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	4b40      	ldr	r3, [pc, #256]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ee      	bne.n	8003e04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80ad 	beq.w	8003f9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d060      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d145      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <HAL_RCC_OscConfig+0x4b4>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd ff1a 	bl	8001c94 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd ff16 	bl	8001c94 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e093      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	071b      	lsls	r3, r3, #28
 8003eae:	491b      	ldr	r1, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <HAL_RCC_OscConfig+0x4b4>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fd feeb 	bl	8001c94 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fee7 	bl	8001c94 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e064      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x452>
 8003ee0:	e05c      	b.n	8003f9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <HAL_RCC_OscConfig+0x4b4>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fed4 	bl	8001c94 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fed0 	bl	8001c94 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04d      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x480>
 8003f0e:	e045      	b.n	8003f9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e040      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000
 8003f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_RCC_OscConfig+0x538>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d030      	beq.n	8003f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d129      	bne.n	8003f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d122      	bne.n	8003f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f58:	4013      	ands	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d119      	bne.n	8003f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	3b01      	subs	r3, #1
 8003f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d10f      	bne.n	8003f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e041      	b.n	8004042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fcb8 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 fbea 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e041      	b.n	80040e0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f839 	bl	80040e8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f000 fb9b 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_TIM_OC_Start_IT+0x24>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e022      	b.n	8004166 <HAL_TIM_OC_Start_IT+0x6a>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b04      	cmp	r3, #4
 8004124:	d109      	bne.n	800413a <HAL_TIM_OC_Start_IT+0x3e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e015      	b.n	8004166 <HAL_TIM_OC_Start_IT+0x6a>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d109      	bne.n	8004154 <HAL_TIM_OC_Start_IT+0x58>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e008      	b.n	8004166 <HAL_TIM_OC_Start_IT+0x6a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0c2      	b.n	80042f4 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_TIM_OC_Start_IT+0x82>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417c:	e013      	b.n	80041a6 <HAL_TIM_OC_Start_IT+0xaa>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d104      	bne.n	800418e <HAL_TIM_OC_Start_IT+0x92>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418c:	e00b      	b.n	80041a6 <HAL_TIM_OC_Start_IT+0xaa>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_TIM_OC_Start_IT+0xa2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	e003      	b.n	80041a6 <HAL_TIM_OC_Start_IT+0xaa>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d841      	bhi.n	8004230 <HAL_TIM_OC_Start_IT+0x134>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <HAL_TIM_OC_Start_IT+0xb8>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	08004231 	.word	0x08004231
 80041bc:	08004231 	.word	0x08004231
 80041c0:	08004231 	.word	0x08004231
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	08004231 	.word	0x08004231
 80041cc:	08004231 	.word	0x08004231
 80041d0:	08004231 	.word	0x08004231
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	08004231 	.word	0x08004231
 80041dc:	08004231 	.word	0x08004231
 80041e0:	08004231 	.word	0x08004231
 80041e4:	0800421f 	.word	0x0800421f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0202 	orr.w	r2, r2, #2
 80041f6:	60da      	str	r2, [r3, #12]
      break;
 80041f8:	e01b      	b.n	8004232 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0204 	orr.w	r2, r2, #4
 8004208:	60da      	str	r2, [r3, #12]
      break;
 800420a:	e012      	b.n	8004232 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	60da      	str	r2, [r3, #12]
      break;
 800421c:	e009      	b.n	8004232 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0210 	orr.w	r2, r2, #16
 800422c:	60da      	str	r2, [r3, #12]
      break;
 800422e:	e000      	b.n	8004232 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8004230:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fdac 	bl	8004d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <HAL_TIM_OC_Start_IT+0x200>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_TIM_OC_Start_IT+0x158>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <HAL_TIM_OC_Start_IT+0x204>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_TIM_OC_Start_IT+0x15c>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_TIM_OC_Start_IT+0x15e>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <HAL_TIM_OC_Start_IT+0x200>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d01d      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <HAL_TIM_OC_Start_IT+0x208>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d018      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_TIM_OC_Start_IT+0x20c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_TIM_OC_Start_IT+0x210>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIM_OC_Start_IT+0x204>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_TIM_OC_Start_IT+0x214>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIM_OC_Start_IT+0x1c2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a16      	ldr	r2, [pc, #88]	; (8004314 <HAL_TIM_OC_Start_IT+0x218>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d111      	bne.n	80042e2 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b06      	cmp	r3, #6
 80042ce:	d010      	beq.n	80042f2 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	e007      	b.n	80042f2 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40010000 	.word	0x40010000
 8004300:	40010400 	.word	0x40010400
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40014000 	.word	0x40014000
 8004314:	40001800 	.word	0x40001800

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0202 	mvn.w	r2, #2
 8004344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa14 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa06 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fa17 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d122      	bne.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d11b      	bne.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9ea 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f9dc 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f9ed 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d122      	bne.n	800441c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d11b      	bne.n	800441c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0208 	mvn.w	r2, #8
 80043ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2204      	movs	r2, #4
 80043f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9c0 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9b2 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f9c3 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b10      	cmp	r3, #16
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b10      	cmp	r3, #16
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0210 	mvn.w	r2, #16
 8004440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2208      	movs	r2, #8
 8004446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f996 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f988 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f999 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10e      	bne.n	800449c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0201 	mvn.w	r2, #1
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f962 	bl	8004760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b80      	cmp	r3, #128	; 0x80
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fd14 	bl	8004ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f95e 	bl	80047b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0220 	mvn.w	r2, #32
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fcde 	bl	8004edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_TIM_OC_ConfigChannel+0x1a>
 800453e:	2302      	movs	r3, #2
 8004540:	e046      	b.n	80045d0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b0c      	cmp	r3, #12
 800454e:	d839      	bhi.n	80045c4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800458d 	.word	0x0800458d
 800455c:	080045c5 	.word	0x080045c5
 8004560:	080045c5 	.word	0x080045c5
 8004564:	080045c5 	.word	0x080045c5
 8004568:	0800459b 	.word	0x0800459b
 800456c:	080045c5 	.word	0x080045c5
 8004570:	080045c5 	.word	0x080045c5
 8004574:	080045c5 	.word	0x080045c5
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045c5 	.word	0x080045c5
 8004580:	080045c5 	.word	0x080045c5
 8004584:	080045c5 	.word	0x080045c5
 8004588:	080045b7 	.word	0x080045b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f9b6 	bl	8004904 <TIM_OC1_SetConfig>
      break;
 8004598:	e015      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fa1f 	bl	80049e4 <TIM_OC2_SetConfig>
      break;
 80045a6:	e00e      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fa8e 	bl	8004ad0 <TIM_OC3_SetConfig>
      break;
 80045b4:	e007      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fafb 	bl	8004bb8 <TIM_OC4_SetConfig>
      break;
 80045c2:	e000      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80045c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_ConfigClockSource+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e0b3      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x180>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800460e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004616:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004628:	d03e      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xd0>
 800462a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462e:	f200 8087 	bhi.w	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	f000 8085 	beq.w	8004744 <HAL_TIM_ConfigClockSource+0x16c>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d87f      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004640:	2b70      	cmp	r3, #112	; 0x70
 8004642:	d01a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0xa2>
 8004644:	2b70      	cmp	r3, #112	; 0x70
 8004646:	d87b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004648:	2b60      	cmp	r3, #96	; 0x60
 800464a:	d050      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x116>
 800464c:	2b60      	cmp	r3, #96	; 0x60
 800464e:	d877      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004650:	2b50      	cmp	r3, #80	; 0x50
 8004652:	d03c      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0xf6>
 8004654:	2b50      	cmp	r3, #80	; 0x50
 8004656:	d873      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d058      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x136>
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d86f      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d064      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x156>
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d86b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d060      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x156>
 800466c:	2b20      	cmp	r3, #32
 800466e:	d867      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05c      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x156>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d05a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004678:	e062      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6899      	ldr	r1, [r3, #8]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f000 fb65 	bl	8004d58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800469c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	609a      	str	r2, [r3, #8]
      break;
 80046a6:	e04e      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f000 fb4e 	bl	8004d58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ca:	609a      	str	r2, [r3, #8]
      break;
 80046cc:	e03b      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fac2 	bl	8004c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2150      	movs	r1, #80	; 0x50
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fb1b 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 80046ec:	e02b      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 fae1 	bl	8004cc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2160      	movs	r1, #96	; 0x60
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fb0b 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 800470c:	e01b      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6859      	ldr	r1, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	461a      	mov	r2, r3
 800471c:	f000 faa2 	bl	8004c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2140      	movs	r1, #64	; 0x40
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fafb 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 800472c:	e00b      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f000 faf2 	bl	8004d22 <TIM_ITRx_SetConfig>
        break;
 800473e:	e002      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3d      	ldr	r2, [pc, #244]	; (80048dc <TIM_Base_SetConfig+0x118>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3b      	ldr	r2, [pc, #236]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d027      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <TIM_Base_SetConfig+0x118>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d023      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <TIM_Base_SetConfig+0x128>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <TIM_Base_SetConfig+0x12c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <TIM_Base_SetConfig+0x130>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x134>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <TIM_Base_SetConfig+0x138>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	; (8004900 <TIM_Base_SetConfig+0x13c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	40001800 	.word	0x40001800
 80048fc:	40001c00 	.word	0x40001c00
 8004900:	40002000 	.word	0x40002000

08004904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <TIM_OC1_SetConfig+0xd8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_OC1_SetConfig+0x64>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <TIM_OC1_SetConfig+0xdc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0308 	bic.w	r3, r3, #8
 800496e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <TIM_OC1_SetConfig+0xd8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC1_SetConfig+0x8e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <TIM_OC1_SetConfig+0xdc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d111      	bne.n	80049b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400

080049e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0320 	bic.w	r3, r3, #32
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <TIM_OC2_SetConfig+0xe4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC2_SetConfig+0x68>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a21      	ldr	r2, [pc, #132]	; (8004acc <TIM_OC2_SetConfig+0xe8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d10d      	bne.n	8004a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC2_SetConfig+0xe4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC2_SetConfig+0x94>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <TIM_OC2_SetConfig+0xe8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d113      	bne.n	8004aa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400

08004ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <TIM_OC3_SetConfig+0xe0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC3_SetConfig+0x66>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <TIM_OC3_SetConfig+0xe4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10d      	bne.n	8004b52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <TIM_OC3_SetConfig+0xe0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC3_SetConfig+0x92>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <TIM_OC3_SetConfig+0xe4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d113      	bne.n	8004b8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <TIM_OC4_SetConfig+0xa4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC4_SetConfig+0x68>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <TIM_OC4_SetConfig+0xa8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40010400 	.word	0x40010400

08004c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 030a 	bic.w	r3, r3, #10
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b087      	sub	sp, #28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0210 	bic.w	r2, r3, #16
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	031b      	lsls	r3, r3, #12
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f043 0307 	orr.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	609a      	str	r2, [r3, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2201      	movs	r2, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e05a      	b.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d01d      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10c      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800

08004edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03f      	b.n	8004f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fdda 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f829 	bl	8004fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	b09f      	sub	sp, #124	; 0x7c
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb6:	68d9      	ldr	r1, [r3, #12]
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	ea40 0301 	orr.w	r3, r0, r1
 8004fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fe4:	f021 010c 	bic.w	r1, r1, #12
 8004fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	6999      	ldr	r1, [r3, #24]
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	ea40 0301 	orr.w	r3, r0, r1
 8005008:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4bc5      	ldr	r3, [pc, #788]	; (8005324 <UART_SetConfig+0x384>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d004      	beq.n	800501e <UART_SetConfig+0x7e>
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4bc3      	ldr	r3, [pc, #780]	; (8005328 <UART_SetConfig+0x388>)
 800501a:	429a      	cmp	r2, r3
 800501c:	d103      	bne.n	8005026 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800501e:	f7fe fb61 	bl	80036e4 <HAL_RCC_GetPCLK2Freq>
 8005022:	6778      	str	r0, [r7, #116]	; 0x74
 8005024:	e002      	b.n	800502c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005026:	f7fe fb49 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 800502a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005034:	f040 80b6 	bne.w	80051a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503a:	461c      	mov	r4, r3
 800503c:	f04f 0500 	mov.w	r5, #0
 8005040:	4622      	mov	r2, r4
 8005042:	462b      	mov	r3, r5
 8005044:	1891      	adds	r1, r2, r2
 8005046:	6439      	str	r1, [r7, #64]	; 0x40
 8005048:	415b      	adcs	r3, r3
 800504a:	647b      	str	r3, [r7, #68]	; 0x44
 800504c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005050:	1912      	adds	r2, r2, r4
 8005052:	eb45 0303 	adc.w	r3, r5, r3
 8005056:	f04f 0000 	mov.w	r0, #0
 800505a:	f04f 0100 	mov.w	r1, #0
 800505e:	00d9      	lsls	r1, r3, #3
 8005060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005064:	00d0      	lsls	r0, r2, #3
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	1911      	adds	r1, r2, r4
 800506c:	6639      	str	r1, [r7, #96]	; 0x60
 800506e:	416b      	adcs	r3, r5
 8005070:	667b      	str	r3, [r7, #100]	; 0x64
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	1891      	adds	r1, r2, r2
 800507e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005080:	415b      	adcs	r3, r3
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005088:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800508c:	f7fb fd5a 	bl	8000b44 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4ba5      	ldr	r3, [pc, #660]	; (800532c <UART_SetConfig+0x38c>)
 8005096:	fba3 2302 	umull	r2, r3, r3, r2
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	011e      	lsls	r6, r3, #4
 800509e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a0:	461c      	mov	r4, r3
 80050a2:	f04f 0500 	mov.w	r5, #0
 80050a6:	4622      	mov	r2, r4
 80050a8:	462b      	mov	r3, r5
 80050aa:	1891      	adds	r1, r2, r2
 80050ac:	6339      	str	r1, [r7, #48]	; 0x30
 80050ae:	415b      	adcs	r3, r3
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
 80050b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050b6:	1912      	adds	r2, r2, r4
 80050b8:	eb45 0303 	adc.w	r3, r5, r3
 80050bc:	f04f 0000 	mov.w	r0, #0
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	00d9      	lsls	r1, r3, #3
 80050c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ca:	00d0      	lsls	r0, r2, #3
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	1911      	adds	r1, r2, r4
 80050d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80050d4:	416b      	adcs	r3, r5
 80050d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	461a      	mov	r2, r3
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80050e6:	415b      	adcs	r3, r3
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050f2:	f7fb fd27 	bl	8000b44 <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4b8c      	ldr	r3, [pc, #560]	; (800532c <UART_SetConfig+0x38c>)
 80050fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	2164      	movs	r1, #100	; 0x64
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	3332      	adds	r3, #50	; 0x32
 800510e:	4a87      	ldr	r2, [pc, #540]	; (800532c <UART_SetConfig+0x38c>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800511c:	441e      	add	r6, r3
 800511e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005120:	4618      	mov	r0, r3
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	1894      	adds	r4, r2, r2
 800512c:	623c      	str	r4, [r7, #32]
 800512e:	415b      	adcs	r3, r3
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005136:	1812      	adds	r2, r2, r0
 8005138:	eb41 0303 	adc.w	r3, r1, r3
 800513c:	f04f 0400 	mov.w	r4, #0
 8005140:	f04f 0500 	mov.w	r5, #0
 8005144:	00dd      	lsls	r5, r3, #3
 8005146:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800514a:	00d4      	lsls	r4, r2, #3
 800514c:	4622      	mov	r2, r4
 800514e:	462b      	mov	r3, r5
 8005150:	1814      	adds	r4, r2, r0
 8005152:	653c      	str	r4, [r7, #80]	; 0x50
 8005154:	414b      	adcs	r3, r1
 8005156:	657b      	str	r3, [r7, #84]	; 0x54
 8005158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	461a      	mov	r2, r3
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	1891      	adds	r1, r2, r2
 8005164:	61b9      	str	r1, [r7, #24]
 8005166:	415b      	adcs	r3, r3
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800516e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005172:	f7fb fce7 	bl	8000b44 <__aeabi_uldivmod>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4b6c      	ldr	r3, [pc, #432]	; (800532c <UART_SetConfig+0x38c>)
 800517c:	fba3 1302 	umull	r1, r3, r3, r2
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	2164      	movs	r1, #100	; 0x64
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	3332      	adds	r3, #50	; 0x32
 800518e:	4a67      	ldr	r2, [pc, #412]	; (800532c <UART_SetConfig+0x38c>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	f003 0207 	and.w	r2, r3, #7
 800519a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4432      	add	r2, r6
 80051a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051a2:	e0b9      	b.n	8005318 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a6:	461c      	mov	r4, r3
 80051a8:	f04f 0500 	mov.w	r5, #0
 80051ac:	4622      	mov	r2, r4
 80051ae:	462b      	mov	r3, r5
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	6139      	str	r1, [r7, #16]
 80051b4:	415b      	adcs	r3, r3
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051bc:	1912      	adds	r2, r2, r4
 80051be:	eb45 0303 	adc.w	r3, r5, r3
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f04f 0100 	mov.w	r1, #0
 80051ca:	00d9      	lsls	r1, r3, #3
 80051cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d0:	00d0      	lsls	r0, r2, #3
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	eb12 0804 	adds.w	r8, r2, r4
 80051da:	eb43 0905 	adc.w	r9, r3, r5
 80051de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	008b      	lsls	r3, r1, #2
 80051f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051f6:	0082      	lsls	r2, r0, #2
 80051f8:	4640      	mov	r0, r8
 80051fa:	4649      	mov	r1, r9
 80051fc:	f7fb fca2 	bl	8000b44 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4b49      	ldr	r3, [pc, #292]	; (800532c <UART_SetConfig+0x38c>)
 8005206:	fba3 2302 	umull	r2, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	011e      	lsls	r6, r3, #4
 800520e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005210:	4618      	mov	r0, r3
 8005212:	f04f 0100 	mov.w	r1, #0
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	1894      	adds	r4, r2, r2
 800521c:	60bc      	str	r4, [r7, #8]
 800521e:	415b      	adcs	r3, r3
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005226:	1812      	adds	r2, r2, r0
 8005228:	eb41 0303 	adc.w	r3, r1, r3
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	f04f 0500 	mov.w	r5, #0
 8005234:	00dd      	lsls	r5, r3, #3
 8005236:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800523a:	00d4      	lsls	r4, r2, #3
 800523c:	4622      	mov	r2, r4
 800523e:	462b      	mov	r3, r5
 8005240:	1814      	adds	r4, r2, r0
 8005242:	64bc      	str	r4, [r7, #72]	; 0x48
 8005244:	414b      	adcs	r3, r1
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	008b      	lsls	r3, r1, #2
 800525c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005260:	0082      	lsls	r2, r0, #2
 8005262:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005266:	f7fb fc6d 	bl	8000b44 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4b2f      	ldr	r3, [pc, #188]	; (800532c <UART_SetConfig+0x38c>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a2a      	ldr	r2, [pc, #168]	; (800532c <UART_SetConfig+0x38c>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528e:	441e      	add	r6, r3
 8005290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005292:	4618      	mov	r0, r3
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	1894      	adds	r4, r2, r2
 800529e:	603c      	str	r4, [r7, #0]
 80052a0:	415b      	adcs	r3, r3
 80052a2:	607b      	str	r3, [r7, #4]
 80052a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a8:	1812      	adds	r2, r2, r0
 80052aa:	eb41 0303 	adc.w	r3, r1, r3
 80052ae:	f04f 0400 	mov.w	r4, #0
 80052b2:	f04f 0500 	mov.w	r5, #0
 80052b6:	00dd      	lsls	r5, r3, #3
 80052b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052bc:	00d4      	lsls	r4, r2, #3
 80052be:	4622      	mov	r2, r4
 80052c0:	462b      	mov	r3, r5
 80052c2:	eb12 0a00 	adds.w	sl, r2, r0
 80052c6:	eb43 0b01 	adc.w	fp, r3, r1
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	008b      	lsls	r3, r1, #2
 80052de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e2:	0082      	lsls	r2, r0, #2
 80052e4:	4650      	mov	r0, sl
 80052e6:	4659      	mov	r1, fp
 80052e8:	f7fb fc2c 	bl	8000b44 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <UART_SetConfig+0x38c>)
 80052f2:	fba3 1302 	umull	r1, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2164      	movs	r1, #100	; 0x64
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	3332      	adds	r3, #50	; 0x32
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <UART_SetConfig+0x38c>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4432      	add	r2, r6
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	377c      	adds	r7, #124	; 0x7c
 800531c:	46bd      	mov	sp, r7
 800531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005322:	bf00      	nop
 8005324:	40011000 	.word	0x40011000
 8005328:	40011400 	.word	0x40011400
 800532c:	51eb851f 	.word	0x51eb851f

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4d0d      	ldr	r5, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2600      	movs	r6, #0
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4d0b      	ldr	r5, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f001 f856 	bl	80063f4 <_init>
 8005348:	1b64      	subs	r4, r4, r5
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2600      	movs	r6, #0
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f855 3b04 	ldr.w	r3, [r5], #4
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	08006610 	.word	0x08006610
 800536c:	08006610 	.word	0x08006610
 8005370:	08006610 	.word	0x08006610
 8005374:	08006614 	.word	0x08006614

08005378 <memset>:
 8005378:	4402      	add	r2, r0
 800537a:	4603      	mov	r3, r0
 800537c:	4293      	cmp	r3, r2
 800537e:	d100      	bne.n	8005382 <memset+0xa>
 8005380:	4770      	bx	lr
 8005382:	f803 1b01 	strb.w	r1, [r3], #1
 8005386:	e7f9      	b.n	800537c <memset+0x4>

08005388 <sin>:
 8005388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800538a:	ec53 2b10 	vmov	r2, r3, d0
 800538e:	4826      	ldr	r0, [pc, #152]	; (8005428 <sin+0xa0>)
 8005390:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005394:	4281      	cmp	r1, r0
 8005396:	dc07      	bgt.n	80053a8 <sin+0x20>
 8005398:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005420 <sin+0x98>
 800539c:	2000      	movs	r0, #0
 800539e:	f000 fe5b 	bl	8006058 <__kernel_sin>
 80053a2:	ec51 0b10 	vmov	r0, r1, d0
 80053a6:	e007      	b.n	80053b8 <sin+0x30>
 80053a8:	4820      	ldr	r0, [pc, #128]	; (800542c <sin+0xa4>)
 80053aa:	4281      	cmp	r1, r0
 80053ac:	dd09      	ble.n	80053c2 <sin+0x3a>
 80053ae:	ee10 0a10 	vmov	r0, s0
 80053b2:	4619      	mov	r1, r3
 80053b4:	f7fa ff2c 	bl	8000210 <__aeabi_dsub>
 80053b8:	ec41 0b10 	vmov	d0, r0, r1
 80053bc:	b005      	add	sp, #20
 80053be:	f85d fb04 	ldr.w	pc, [sp], #4
 80053c2:	4668      	mov	r0, sp
 80053c4:	f000 f834 	bl	8005430 <__ieee754_rem_pio2>
 80053c8:	f000 0003 	and.w	r0, r0, #3
 80053cc:	2801      	cmp	r0, #1
 80053ce:	d008      	beq.n	80053e2 <sin+0x5a>
 80053d0:	2802      	cmp	r0, #2
 80053d2:	d00d      	beq.n	80053f0 <sin+0x68>
 80053d4:	b9d0      	cbnz	r0, 800540c <sin+0x84>
 80053d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053da:	ed9d 0b00 	vldr	d0, [sp]
 80053de:	2001      	movs	r0, #1
 80053e0:	e7dd      	b.n	800539e <sin+0x16>
 80053e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053e6:	ed9d 0b00 	vldr	d0, [sp]
 80053ea:	f000 fa2d 	bl	8005848 <__kernel_cos>
 80053ee:	e7d8      	b.n	80053a2 <sin+0x1a>
 80053f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053f4:	ed9d 0b00 	vldr	d0, [sp]
 80053f8:	2001      	movs	r0, #1
 80053fa:	f000 fe2d 	bl	8006058 <__kernel_sin>
 80053fe:	ec53 2b10 	vmov	r2, r3, d0
 8005402:	ee10 0a10 	vmov	r0, s0
 8005406:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800540a:	e7d5      	b.n	80053b8 <sin+0x30>
 800540c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005410:	ed9d 0b00 	vldr	d0, [sp]
 8005414:	f000 fa18 	bl	8005848 <__kernel_cos>
 8005418:	e7f1      	b.n	80053fe <sin+0x76>
 800541a:	bf00      	nop
 800541c:	f3af 8000 	nop.w
	...
 8005428:	3fe921fb 	.word	0x3fe921fb
 800542c:	7fefffff 	.word	0x7fefffff

08005430 <__ieee754_rem_pio2>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	ed2d 8b02 	vpush	{d8}
 8005438:	ec55 4b10 	vmov	r4, r5, d0
 800543c:	4bca      	ldr	r3, [pc, #808]	; (8005768 <__ieee754_rem_pio2+0x338>)
 800543e:	b08b      	sub	sp, #44	; 0x2c
 8005440:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005444:	4598      	cmp	r8, r3
 8005446:	4682      	mov	sl, r0
 8005448:	9502      	str	r5, [sp, #8]
 800544a:	dc08      	bgt.n	800545e <__ieee754_rem_pio2+0x2e>
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	ed80 0b00 	vstr	d0, [r0]
 8005454:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005458:	f04f 0b00 	mov.w	fp, #0
 800545c:	e028      	b.n	80054b0 <__ieee754_rem_pio2+0x80>
 800545e:	4bc3      	ldr	r3, [pc, #780]	; (800576c <__ieee754_rem_pio2+0x33c>)
 8005460:	4598      	cmp	r8, r3
 8005462:	dc78      	bgt.n	8005556 <__ieee754_rem_pio2+0x126>
 8005464:	9b02      	ldr	r3, [sp, #8]
 8005466:	4ec2      	ldr	r6, [pc, #776]	; (8005770 <__ieee754_rem_pio2+0x340>)
 8005468:	2b00      	cmp	r3, #0
 800546a:	ee10 0a10 	vmov	r0, s0
 800546e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005730 <__ieee754_rem_pio2+0x300>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	4629      	mov	r1, r5
 8005476:	dd39      	ble.n	80054ec <__ieee754_rem_pio2+0xbc>
 8005478:	f7fa feca 	bl	8000210 <__aeabi_dsub>
 800547c:	45b0      	cmp	r8, r6
 800547e:	4604      	mov	r4, r0
 8005480:	460d      	mov	r5, r1
 8005482:	d01b      	beq.n	80054bc <__ieee754_rem_pio2+0x8c>
 8005484:	a3ac      	add	r3, pc, #688	; (adr r3, 8005738 <__ieee754_rem_pio2+0x308>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa fec1 	bl	8000210 <__aeabi_dsub>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	e9ca 2300 	strd	r2, r3, [sl]
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fa feb9 	bl	8000210 <__aeabi_dsub>
 800549e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005738 <__ieee754_rem_pio2+0x308>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fa feb4 	bl	8000210 <__aeabi_dsub>
 80054a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80054ac:	f04f 0b01 	mov.w	fp, #1
 80054b0:	4658      	mov	r0, fp
 80054b2:	b00b      	add	sp, #44	; 0x2c
 80054b4:	ecbd 8b02 	vpop	{d8}
 80054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005740 <__ieee754_rem_pio2+0x310>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fa fea5 	bl	8000210 <__aeabi_dsub>
 80054c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005748 <__ieee754_rem_pio2+0x318>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	f7fa fe9e 	bl	8000210 <__aeabi_dsub>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9ca 2300 	strd	r2, r3, [sl]
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	f7fa fe96 	bl	8000210 <__aeabi_dsub>
 80054e4:	a398      	add	r3, pc, #608	; (adr r3, 8005748 <__ieee754_rem_pio2+0x318>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	e7db      	b.n	80054a4 <__ieee754_rem_pio2+0x74>
 80054ec:	f7fa fe92 	bl	8000214 <__adddf3>
 80054f0:	45b0      	cmp	r8, r6
 80054f2:	4604      	mov	r4, r0
 80054f4:	460d      	mov	r5, r1
 80054f6:	d016      	beq.n	8005526 <__ieee754_rem_pio2+0xf6>
 80054f8:	a38f      	add	r3, pc, #572	; (adr r3, 8005738 <__ieee754_rem_pio2+0x308>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fe89 	bl	8000214 <__adddf3>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	e9ca 2300 	strd	r2, r3, [sl]
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fa fe7f 	bl	8000210 <__aeabi_dsub>
 8005512:	a389      	add	r3, pc, #548	; (adr r3, 8005738 <__ieee754_rem_pio2+0x308>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f7fa fe7c 	bl	8000214 <__adddf3>
 800551c:	f04f 3bff 	mov.w	fp, #4294967295
 8005520:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005524:	e7c4      	b.n	80054b0 <__ieee754_rem_pio2+0x80>
 8005526:	a386      	add	r3, pc, #536	; (adr r3, 8005740 <__ieee754_rem_pio2+0x310>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa fe72 	bl	8000214 <__adddf3>
 8005530:	a385      	add	r3, pc, #532	; (adr r3, 8005748 <__ieee754_rem_pio2+0x318>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
 800553a:	f7fa fe6b 	bl	8000214 <__adddf3>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9ca 2300 	strd	r2, r3, [sl]
 8005546:	4620      	mov	r0, r4
 8005548:	4629      	mov	r1, r5
 800554a:	f7fa fe61 	bl	8000210 <__aeabi_dsub>
 800554e:	a37e      	add	r3, pc, #504	; (adr r3, 8005748 <__ieee754_rem_pio2+0x318>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	e7e0      	b.n	8005518 <__ieee754_rem_pio2+0xe8>
 8005556:	4b87      	ldr	r3, [pc, #540]	; (8005774 <__ieee754_rem_pio2+0x344>)
 8005558:	4598      	cmp	r8, r3
 800555a:	f300 80d9 	bgt.w	8005710 <__ieee754_rem_pio2+0x2e0>
 800555e:	f000 fe39 	bl	80061d4 <fabs>
 8005562:	ec55 4b10 	vmov	r4, r5, d0
 8005566:	ee10 0a10 	vmov	r0, s0
 800556a:	a379      	add	r3, pc, #484	; (adr r3, 8005750 <__ieee754_rem_pio2+0x320>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	4629      	mov	r1, r5
 8005572:	f7fb f805 	bl	8000580 <__aeabi_dmul>
 8005576:	4b80      	ldr	r3, [pc, #512]	; (8005778 <__ieee754_rem_pio2+0x348>)
 8005578:	2200      	movs	r2, #0
 800557a:	f7fa fe4b 	bl	8000214 <__adddf3>
 800557e:	f7fb fa99 	bl	8000ab4 <__aeabi_d2iz>
 8005582:	4683      	mov	fp, r0
 8005584:	f7fa ff92 	bl	80004ac <__aeabi_i2d>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	ec43 2b18 	vmov	d8, r2, r3
 8005590:	a367      	add	r3, pc, #412	; (adr r3, 8005730 <__ieee754_rem_pio2+0x300>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fa fff3 	bl	8000580 <__aeabi_dmul>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fa fe35 	bl	8000210 <__aeabi_dsub>
 80055a6:	a364      	add	r3, pc, #400	; (adr r3, 8005738 <__ieee754_rem_pio2+0x308>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	4606      	mov	r6, r0
 80055ae:	460f      	mov	r7, r1
 80055b0:	ec51 0b18 	vmov	r0, r1, d8
 80055b4:	f7fa ffe4 	bl	8000580 <__aeabi_dmul>
 80055b8:	f1bb 0f1f 	cmp.w	fp, #31
 80055bc:	4604      	mov	r4, r0
 80055be:	460d      	mov	r5, r1
 80055c0:	dc0d      	bgt.n	80055de <__ieee754_rem_pio2+0x1ae>
 80055c2:	4b6e      	ldr	r3, [pc, #440]	; (800577c <__ieee754_rem_pio2+0x34c>)
 80055c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	4543      	cmp	r3, r8
 80055ce:	d006      	beq.n	80055de <__ieee754_rem_pio2+0x1ae>
 80055d0:	4622      	mov	r2, r4
 80055d2:	462b      	mov	r3, r5
 80055d4:	4630      	mov	r0, r6
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fa fe1a 	bl	8000210 <__aeabi_dsub>
 80055dc:	e00f      	b.n	80055fe <__ieee754_rem_pio2+0x1ce>
 80055de:	462b      	mov	r3, r5
 80055e0:	4622      	mov	r2, r4
 80055e2:	4630      	mov	r0, r6
 80055e4:	4639      	mov	r1, r7
 80055e6:	f7fa fe13 	bl	8000210 <__aeabi_dsub>
 80055ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80055ee:	9303      	str	r3, [sp, #12]
 80055f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80055f8:	f1b8 0f10 	cmp.w	r8, #16
 80055fc:	dc02      	bgt.n	8005604 <__ieee754_rem_pio2+0x1d4>
 80055fe:	e9ca 0100 	strd	r0, r1, [sl]
 8005602:	e039      	b.n	8005678 <__ieee754_rem_pio2+0x248>
 8005604:	a34e      	add	r3, pc, #312	; (adr r3, 8005740 <__ieee754_rem_pio2+0x310>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	ec51 0b18 	vmov	r0, r1, d8
 800560e:	f7fa ffb7 	bl	8000580 <__aeabi_dmul>
 8005612:	4604      	mov	r4, r0
 8005614:	460d      	mov	r5, r1
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4630      	mov	r0, r6
 800561c:	4639      	mov	r1, r7
 800561e:	f7fa fdf7 	bl	8000210 <__aeabi_dsub>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4680      	mov	r8, r0
 8005628:	4689      	mov	r9, r1
 800562a:	4630      	mov	r0, r6
 800562c:	4639      	mov	r1, r7
 800562e:	f7fa fdef 	bl	8000210 <__aeabi_dsub>
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	f7fa fdeb 	bl	8000210 <__aeabi_dsub>
 800563a:	a343      	add	r3, pc, #268	; (adr r3, 8005748 <__ieee754_rem_pio2+0x318>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	4604      	mov	r4, r0
 8005642:	460d      	mov	r5, r1
 8005644:	ec51 0b18 	vmov	r0, r1, d8
 8005648:	f7fa ff9a 	bl	8000580 <__aeabi_dmul>
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	f7fa fdde 	bl	8000210 <__aeabi_dsub>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4604      	mov	r4, r0
 800565a:	460d      	mov	r5, r1
 800565c:	4640      	mov	r0, r8
 800565e:	4649      	mov	r1, r9
 8005660:	f7fa fdd6 	bl	8000210 <__aeabi_dsub>
 8005664:	9a03      	ldr	r2, [sp, #12]
 8005666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b31      	cmp	r3, #49	; 0x31
 800566e:	dc24      	bgt.n	80056ba <__ieee754_rem_pio2+0x28a>
 8005670:	e9ca 0100 	strd	r0, r1, [sl]
 8005674:	4646      	mov	r6, r8
 8005676:	464f      	mov	r7, r9
 8005678:	e9da 8900 	ldrd	r8, r9, [sl]
 800567c:	4630      	mov	r0, r6
 800567e:	4642      	mov	r2, r8
 8005680:	464b      	mov	r3, r9
 8005682:	4639      	mov	r1, r7
 8005684:	f7fa fdc4 	bl	8000210 <__aeabi_dsub>
 8005688:	462b      	mov	r3, r5
 800568a:	4622      	mov	r2, r4
 800568c:	f7fa fdc0 	bl	8000210 <__aeabi_dsub>
 8005690:	9b02      	ldr	r3, [sp, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005698:	f6bf af0a 	bge.w	80054b0 <__ieee754_rem_pio2+0x80>
 800569c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80056a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80056a4:	f8ca 8000 	str.w	r8, [sl]
 80056a8:	f8ca 0008 	str.w	r0, [sl, #8]
 80056ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80056b4:	f1cb 0b00 	rsb	fp, fp, #0
 80056b8:	e6fa      	b.n	80054b0 <__ieee754_rem_pio2+0x80>
 80056ba:	a327      	add	r3, pc, #156	; (adr r3, 8005758 <__ieee754_rem_pio2+0x328>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	ec51 0b18 	vmov	r0, r1, d8
 80056c4:	f7fa ff5c 	bl	8000580 <__aeabi_dmul>
 80056c8:	4604      	mov	r4, r0
 80056ca:	460d      	mov	r5, r1
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fa fd9c 	bl	8000210 <__aeabi_dsub>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4606      	mov	r6, r0
 80056de:	460f      	mov	r7, r1
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fa fd94 	bl	8000210 <__aeabi_dsub>
 80056e8:	4622      	mov	r2, r4
 80056ea:	462b      	mov	r3, r5
 80056ec:	f7fa fd90 	bl	8000210 <__aeabi_dsub>
 80056f0:	a31b      	add	r3, pc, #108	; (adr r3, 8005760 <__ieee754_rem_pio2+0x330>)
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	4604      	mov	r4, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	ec51 0b18 	vmov	r0, r1, d8
 80056fe:	f7fa ff3f 	bl	8000580 <__aeabi_dmul>
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	f7fa fd83 	bl	8000210 <__aeabi_dsub>
 800570a:	4604      	mov	r4, r0
 800570c:	460d      	mov	r5, r1
 800570e:	e75f      	b.n	80055d0 <__ieee754_rem_pio2+0x1a0>
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <__ieee754_rem_pio2+0x350>)
 8005712:	4598      	cmp	r8, r3
 8005714:	dd36      	ble.n	8005784 <__ieee754_rem_pio2+0x354>
 8005716:	ee10 2a10 	vmov	r2, s0
 800571a:	462b      	mov	r3, r5
 800571c:	4620      	mov	r0, r4
 800571e:	4629      	mov	r1, r5
 8005720:	f7fa fd76 	bl	8000210 <__aeabi_dsub>
 8005724:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005728:	e9ca 0100 	strd	r0, r1, [sl]
 800572c:	e694      	b.n	8005458 <__ieee754_rem_pio2+0x28>
 800572e:	bf00      	nop
 8005730:	54400000 	.word	0x54400000
 8005734:	3ff921fb 	.word	0x3ff921fb
 8005738:	1a626331 	.word	0x1a626331
 800573c:	3dd0b461 	.word	0x3dd0b461
 8005740:	1a600000 	.word	0x1a600000
 8005744:	3dd0b461 	.word	0x3dd0b461
 8005748:	2e037073 	.word	0x2e037073
 800574c:	3ba3198a 	.word	0x3ba3198a
 8005750:	6dc9c883 	.word	0x6dc9c883
 8005754:	3fe45f30 	.word	0x3fe45f30
 8005758:	2e000000 	.word	0x2e000000
 800575c:	3ba3198a 	.word	0x3ba3198a
 8005760:	252049c1 	.word	0x252049c1
 8005764:	397b839a 	.word	0x397b839a
 8005768:	3fe921fb 	.word	0x3fe921fb
 800576c:	4002d97b 	.word	0x4002d97b
 8005770:	3ff921fb 	.word	0x3ff921fb
 8005774:	413921fb 	.word	0x413921fb
 8005778:	3fe00000 	.word	0x3fe00000
 800577c:	08006430 	.word	0x08006430
 8005780:	7fefffff 	.word	0x7fefffff
 8005784:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005788:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800578c:	ee10 0a10 	vmov	r0, s0
 8005790:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005794:	ee10 6a10 	vmov	r6, s0
 8005798:	460f      	mov	r7, r1
 800579a:	f7fb f98b 	bl	8000ab4 <__aeabi_d2iz>
 800579e:	f7fa fe85 	bl	80004ac <__aeabi_i2d>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
 80057aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057ae:	f7fa fd2f 	bl	8000210 <__aeabi_dsub>
 80057b2:	4b22      	ldr	r3, [pc, #136]	; (800583c <__ieee754_rem_pio2+0x40c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	f7fa fee3 	bl	8000580 <__aeabi_dmul>
 80057ba:	460f      	mov	r7, r1
 80057bc:	4606      	mov	r6, r0
 80057be:	f7fb f979 	bl	8000ab4 <__aeabi_d2iz>
 80057c2:	f7fa fe73 	bl	80004ac <__aeabi_i2d>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4630      	mov	r0, r6
 80057cc:	4639      	mov	r1, r7
 80057ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057d2:	f7fa fd1d 	bl	8000210 <__aeabi_dsub>
 80057d6:	4b19      	ldr	r3, [pc, #100]	; (800583c <__ieee754_rem_pio2+0x40c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fa fed1 	bl	8000580 <__aeabi_dmul>
 80057de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057e2:	ad04      	add	r5, sp, #16
 80057e4:	f04f 0803 	mov.w	r8, #3
 80057e8:	46a9      	mov	r9, r5
 80057ea:	2600      	movs	r6, #0
 80057ec:	2700      	movs	r7, #0
 80057ee:	4632      	mov	r2, r6
 80057f0:	463b      	mov	r3, r7
 80057f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80057f6:	46c3      	mov	fp, r8
 80057f8:	3d08      	subs	r5, #8
 80057fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80057fe:	f7fb f927 	bl	8000a50 <__aeabi_dcmpeq>
 8005802:	2800      	cmp	r0, #0
 8005804:	d1f3      	bne.n	80057ee <__ieee754_rem_pio2+0x3be>
 8005806:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <__ieee754_rem_pio2+0x410>)
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	2302      	movs	r3, #2
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4622      	mov	r2, r4
 8005810:	465b      	mov	r3, fp
 8005812:	4651      	mov	r1, sl
 8005814:	4648      	mov	r0, r9
 8005816:	f000 f8df 	bl	80059d8 <__kernel_rem_pio2>
 800581a:	9b02      	ldr	r3, [sp, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	4683      	mov	fp, r0
 8005820:	f6bf ae46 	bge.w	80054b0 <__ieee754_rem_pio2+0x80>
 8005824:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005828:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800582c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005830:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005834:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005838:	e73a      	b.n	80056b0 <__ieee754_rem_pio2+0x280>
 800583a:	bf00      	nop
 800583c:	41700000 	.word	0x41700000
 8005840:	080064b0 	.word	0x080064b0
 8005844:	00000000 	.word	0x00000000

08005848 <__kernel_cos>:
 8005848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	ec57 6b10 	vmov	r6, r7, d0
 8005850:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005854:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005858:	ed8d 1b00 	vstr	d1, [sp]
 800585c:	da07      	bge.n	800586e <__kernel_cos+0x26>
 800585e:	ee10 0a10 	vmov	r0, s0
 8005862:	4639      	mov	r1, r7
 8005864:	f7fb f926 	bl	8000ab4 <__aeabi_d2iz>
 8005868:	2800      	cmp	r0, #0
 800586a:	f000 8088 	beq.w	800597e <__kernel_cos+0x136>
 800586e:	4632      	mov	r2, r6
 8005870:	463b      	mov	r3, r7
 8005872:	4630      	mov	r0, r6
 8005874:	4639      	mov	r1, r7
 8005876:	f7fa fe83 	bl	8000580 <__aeabi_dmul>
 800587a:	4b51      	ldr	r3, [pc, #324]	; (80059c0 <__kernel_cos+0x178>)
 800587c:	2200      	movs	r2, #0
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
 8005882:	f7fa fe7d 	bl	8000580 <__aeabi_dmul>
 8005886:	a340      	add	r3, pc, #256	; (adr r3, 8005988 <__kernel_cos+0x140>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	4682      	mov	sl, r0
 800588e:	468b      	mov	fp, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fa fe74 	bl	8000580 <__aeabi_dmul>
 8005898:	a33d      	add	r3, pc, #244	; (adr r3, 8005990 <__kernel_cos+0x148>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fcb9 	bl	8000214 <__adddf3>
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	f7fa fe6b 	bl	8000580 <__aeabi_dmul>
 80058aa:	a33b      	add	r3, pc, #236	; (adr r3, 8005998 <__kernel_cos+0x150>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	f7fa fcae 	bl	8000210 <__aeabi_dsub>
 80058b4:	4622      	mov	r2, r4
 80058b6:	462b      	mov	r3, r5
 80058b8:	f7fa fe62 	bl	8000580 <__aeabi_dmul>
 80058bc:	a338      	add	r3, pc, #224	; (adr r3, 80059a0 <__kernel_cos+0x158>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fca7 	bl	8000214 <__adddf3>
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	f7fa fe59 	bl	8000580 <__aeabi_dmul>
 80058ce:	a336      	add	r3, pc, #216	; (adr r3, 80059a8 <__kernel_cos+0x160>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fc9c 	bl	8000210 <__aeabi_dsub>
 80058d8:	4622      	mov	r2, r4
 80058da:	462b      	mov	r3, r5
 80058dc:	f7fa fe50 	bl	8000580 <__aeabi_dmul>
 80058e0:	a333      	add	r3, pc, #204	; (adr r3, 80059b0 <__kernel_cos+0x168>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc95 	bl	8000214 <__adddf3>
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f7fa fe47 	bl	8000580 <__aeabi_dmul>
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	f7fa fe43 	bl	8000580 <__aeabi_dmul>
 80058fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058fe:	4604      	mov	r4, r0
 8005900:	460d      	mov	r5, r1
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	f7fa fe3b 	bl	8000580 <__aeabi_dmul>
 800590a:	460b      	mov	r3, r1
 800590c:	4602      	mov	r2, r0
 800590e:	4629      	mov	r1, r5
 8005910:	4620      	mov	r0, r4
 8005912:	f7fa fc7d 	bl	8000210 <__aeabi_dsub>
 8005916:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <__kernel_cos+0x17c>)
 8005918:	4598      	cmp	r8, r3
 800591a:	4606      	mov	r6, r0
 800591c:	460f      	mov	r7, r1
 800591e:	dc10      	bgt.n	8005942 <__kernel_cos+0xfa>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4650      	mov	r0, sl
 8005926:	4659      	mov	r1, fp
 8005928:	f7fa fc72 	bl	8000210 <__aeabi_dsub>
 800592c:	460b      	mov	r3, r1
 800592e:	4926      	ldr	r1, [pc, #152]	; (80059c8 <__kernel_cos+0x180>)
 8005930:	4602      	mov	r2, r0
 8005932:	2000      	movs	r0, #0
 8005934:	f7fa fc6c 	bl	8000210 <__aeabi_dsub>
 8005938:	ec41 0b10 	vmov	d0, r0, r1
 800593c:	b003      	add	sp, #12
 800593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005942:	4b22      	ldr	r3, [pc, #136]	; (80059cc <__kernel_cos+0x184>)
 8005944:	4920      	ldr	r1, [pc, #128]	; (80059c8 <__kernel_cos+0x180>)
 8005946:	4598      	cmp	r8, r3
 8005948:	bfcc      	ite	gt
 800594a:	4d21      	ldrgt	r5, [pc, #132]	; (80059d0 <__kernel_cos+0x188>)
 800594c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005950:	2400      	movs	r4, #0
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	2000      	movs	r0, #0
 8005958:	f7fa fc5a 	bl	8000210 <__aeabi_dsub>
 800595c:	4622      	mov	r2, r4
 800595e:	4680      	mov	r8, r0
 8005960:	4689      	mov	r9, r1
 8005962:	462b      	mov	r3, r5
 8005964:	4650      	mov	r0, sl
 8005966:	4659      	mov	r1, fp
 8005968:	f7fa fc52 	bl	8000210 <__aeabi_dsub>
 800596c:	4632      	mov	r2, r6
 800596e:	463b      	mov	r3, r7
 8005970:	f7fa fc4e 	bl	8000210 <__aeabi_dsub>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	e7da      	b.n	8005934 <__kernel_cos+0xec>
 800597e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80059b8 <__kernel_cos+0x170>
 8005982:	e7db      	b.n	800593c <__kernel_cos+0xf4>
 8005984:	f3af 8000 	nop.w
 8005988:	be8838d4 	.word	0xbe8838d4
 800598c:	bda8fae9 	.word	0xbda8fae9
 8005990:	bdb4b1c4 	.word	0xbdb4b1c4
 8005994:	3e21ee9e 	.word	0x3e21ee9e
 8005998:	809c52ad 	.word	0x809c52ad
 800599c:	3e927e4f 	.word	0x3e927e4f
 80059a0:	19cb1590 	.word	0x19cb1590
 80059a4:	3efa01a0 	.word	0x3efa01a0
 80059a8:	16c15177 	.word	0x16c15177
 80059ac:	3f56c16c 	.word	0x3f56c16c
 80059b0:	5555554c 	.word	0x5555554c
 80059b4:	3fa55555 	.word	0x3fa55555
 80059b8:	00000000 	.word	0x00000000
 80059bc:	3ff00000 	.word	0x3ff00000
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	3fd33332 	.word	0x3fd33332
 80059c8:	3ff00000 	.word	0x3ff00000
 80059cc:	3fe90000 	.word	0x3fe90000
 80059d0:	3fd20000 	.word	0x3fd20000
 80059d4:	00000000 	.word	0x00000000

080059d8 <__kernel_rem_pio2>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	ed2d 8b02 	vpush	{d8}
 80059e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80059e4:	f112 0f14 	cmn.w	r2, #20
 80059e8:	9308      	str	r3, [sp, #32]
 80059ea:	9101      	str	r1, [sp, #4]
 80059ec:	4bc6      	ldr	r3, [pc, #792]	; (8005d08 <__kernel_rem_pio2+0x330>)
 80059ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80059f0:	9009      	str	r0, [sp, #36]	; 0x24
 80059f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	9b08      	ldr	r3, [sp, #32]
 80059fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80059fe:	bfa8      	it	ge
 8005a00:	1ed4      	subge	r4, r2, #3
 8005a02:	9306      	str	r3, [sp, #24]
 8005a04:	bfb2      	itee	lt
 8005a06:	2400      	movlt	r4, #0
 8005a08:	2318      	movge	r3, #24
 8005a0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005a0e:	f06f 0317 	mvn.w	r3, #23
 8005a12:	fb04 3303 	mla	r3, r4, r3, r3
 8005a16:	eb03 0a02 	add.w	sl, r3, r2
 8005a1a:	9b04      	ldr	r3, [sp, #16]
 8005a1c:	9a06      	ldr	r2, [sp, #24]
 8005a1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005cf8 <__kernel_rem_pio2+0x320>
 8005a22:	eb03 0802 	add.w	r8, r3, r2
 8005a26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005a28:	1aa7      	subs	r7, r4, r2
 8005a2a:	ae20      	add	r6, sp, #128	; 0x80
 8005a2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005a30:	2500      	movs	r5, #0
 8005a32:	4545      	cmp	r5, r8
 8005a34:	dd18      	ble.n	8005a68 <__kernel_rem_pio2+0x90>
 8005a36:	9b08      	ldr	r3, [sp, #32]
 8005a38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005a3c:	aa20      	add	r2, sp, #128	; 0x80
 8005a3e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005cf8 <__kernel_rem_pio2+0x320>
 8005a42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005a46:	f1c3 0301 	rsb	r3, r3, #1
 8005a4a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005a4e:	9307      	str	r3, [sp, #28]
 8005a50:	9b07      	ldr	r3, [sp, #28]
 8005a52:	9a04      	ldr	r2, [sp, #16]
 8005a54:	4443      	add	r3, r8
 8005a56:	429a      	cmp	r2, r3
 8005a58:	db2f      	blt.n	8005aba <__kernel_rem_pio2+0xe2>
 8005a5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005a5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a62:	462f      	mov	r7, r5
 8005a64:	2600      	movs	r6, #0
 8005a66:	e01b      	b.n	8005aa0 <__kernel_rem_pio2+0xc8>
 8005a68:	42ef      	cmn	r7, r5
 8005a6a:	d407      	bmi.n	8005a7c <__kernel_rem_pio2+0xa4>
 8005a6c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005a70:	f7fa fd1c 	bl	80004ac <__aeabi_i2d>
 8005a74:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005a78:	3501      	adds	r5, #1
 8005a7a:	e7da      	b.n	8005a32 <__kernel_rem_pio2+0x5a>
 8005a7c:	ec51 0b18 	vmov	r0, r1, d8
 8005a80:	e7f8      	b.n	8005a74 <__kernel_rem_pio2+0x9c>
 8005a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a86:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005a8a:	f7fa fd79 	bl	8000580 <__aeabi_dmul>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a96:	f7fa fbbd 	bl	8000214 <__adddf3>
 8005a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	9b06      	ldr	r3, [sp, #24]
 8005aa2:	429e      	cmp	r6, r3
 8005aa4:	f1a7 0708 	sub.w	r7, r7, #8
 8005aa8:	ddeb      	ble.n	8005a82 <__kernel_rem_pio2+0xaa>
 8005aaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005aae:	3508      	adds	r5, #8
 8005ab0:	ecab 7b02 	vstmia	fp!, {d7}
 8005ab4:	f108 0801 	add.w	r8, r8, #1
 8005ab8:	e7ca      	b.n	8005a50 <__kernel_rem_pio2+0x78>
 8005aba:	9b04      	ldr	r3, [sp, #16]
 8005abc:	aa0c      	add	r2, sp, #48	; 0x30
 8005abe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ac4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005ac6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005aca:	9c04      	ldr	r4, [sp, #16]
 8005acc:	930a      	str	r3, [sp, #40]	; 0x28
 8005ace:	ab98      	add	r3, sp, #608	; 0x260
 8005ad0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ad4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005ad8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005adc:	f8cd b008 	str.w	fp, [sp, #8]
 8005ae0:	4625      	mov	r5, r4
 8005ae2:	2d00      	cmp	r5, #0
 8005ae4:	dc78      	bgt.n	8005bd8 <__kernel_rem_pio2+0x200>
 8005ae6:	ec47 6b10 	vmov	d0, r6, r7
 8005aea:	4650      	mov	r0, sl
 8005aec:	f000 fbfc 	bl	80062e8 <scalbn>
 8005af0:	ec57 6b10 	vmov	r6, r7, d0
 8005af4:	2200      	movs	r2, #0
 8005af6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005afa:	ee10 0a10 	vmov	r0, s0
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa fd3e 	bl	8000580 <__aeabi_dmul>
 8005b04:	ec41 0b10 	vmov	d0, r0, r1
 8005b08:	f000 fb6e 	bl	80061e8 <floor>
 8005b0c:	4b7f      	ldr	r3, [pc, #508]	; (8005d0c <__kernel_rem_pio2+0x334>)
 8005b0e:	ec51 0b10 	vmov	r0, r1, d0
 8005b12:	2200      	movs	r2, #0
 8005b14:	f7fa fd34 	bl	8000580 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	4639      	mov	r1, r7
 8005b20:	f7fa fb76 	bl	8000210 <__aeabi_dsub>
 8005b24:	460f      	mov	r7, r1
 8005b26:	4606      	mov	r6, r0
 8005b28:	f7fa ffc4 	bl	8000ab4 <__aeabi_d2iz>
 8005b2c:	9007      	str	r0, [sp, #28]
 8005b2e:	f7fa fcbd 	bl	80004ac <__aeabi_i2d>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4630      	mov	r0, r6
 8005b38:	4639      	mov	r1, r7
 8005b3a:	f7fa fb69 	bl	8000210 <__aeabi_dsub>
 8005b3e:	f1ba 0f00 	cmp.w	sl, #0
 8005b42:	4606      	mov	r6, r0
 8005b44:	460f      	mov	r7, r1
 8005b46:	dd70      	ble.n	8005c2a <__kernel_rem_pio2+0x252>
 8005b48:	1e62      	subs	r2, r4, #1
 8005b4a:	ab0c      	add	r3, sp, #48	; 0x30
 8005b4c:	9d07      	ldr	r5, [sp, #28]
 8005b4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005b52:	f1ca 0118 	rsb	r1, sl, #24
 8005b56:	fa40 f301 	asr.w	r3, r0, r1
 8005b5a:	441d      	add	r5, r3
 8005b5c:	408b      	lsls	r3, r1
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	ab0c      	add	r3, sp, #48	; 0x30
 8005b62:	9507      	str	r5, [sp, #28]
 8005b64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005b68:	f1ca 0317 	rsb	r3, sl, #23
 8005b6c:	fa40 f303 	asr.w	r3, r0, r3
 8005b70:	9302      	str	r3, [sp, #8]
 8005b72:	9b02      	ldr	r3, [sp, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dd66      	ble.n	8005c46 <__kernel_rem_pio2+0x26e>
 8005b78:	9b07      	ldr	r3, [sp, #28]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	4615      	mov	r5, r2
 8005b82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005b86:	4294      	cmp	r4, r2
 8005b88:	f300 8099 	bgt.w	8005cbe <__kernel_rem_pio2+0x2e6>
 8005b8c:	f1ba 0f00 	cmp.w	sl, #0
 8005b90:	dd07      	ble.n	8005ba2 <__kernel_rem_pio2+0x1ca>
 8005b92:	f1ba 0f01 	cmp.w	sl, #1
 8005b96:	f000 80a5 	beq.w	8005ce4 <__kernel_rem_pio2+0x30c>
 8005b9a:	f1ba 0f02 	cmp.w	sl, #2
 8005b9e:	f000 80c1 	beq.w	8005d24 <__kernel_rem_pio2+0x34c>
 8005ba2:	9b02      	ldr	r3, [sp, #8]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d14e      	bne.n	8005c46 <__kernel_rem_pio2+0x26e>
 8005ba8:	4632      	mov	r2, r6
 8005baa:	463b      	mov	r3, r7
 8005bac:	4958      	ldr	r1, [pc, #352]	; (8005d10 <__kernel_rem_pio2+0x338>)
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fa fb2e 	bl	8000210 <__aeabi_dsub>
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	460f      	mov	r7, r1
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	d044      	beq.n	8005c46 <__kernel_rem_pio2+0x26e>
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005d00 <__kernel_rem_pio2+0x328>
 8005bc2:	f000 fb91 	bl	80062e8 <scalbn>
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	ec53 2b10 	vmov	r2, r3, d0
 8005bce:	f7fa fb1f 	bl	8000210 <__aeabi_dsub>
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	e036      	b.n	8005c46 <__kernel_rem_pio2+0x26e>
 8005bd8:	4b4e      	ldr	r3, [pc, #312]	; (8005d14 <__kernel_rem_pio2+0x33c>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa fcce 	bl	8000580 <__aeabi_dmul>
 8005be4:	f7fa ff66 	bl	8000ab4 <__aeabi_d2iz>
 8005be8:	f7fa fc60 	bl	80004ac <__aeabi_i2d>
 8005bec:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <__kernel_rem_pio2+0x340>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	4689      	mov	r9, r1
 8005bf4:	f7fa fcc4 	bl	8000580 <__aeabi_dmul>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fb06 	bl	8000210 <__aeabi_dsub>
 8005c04:	f7fa ff56 	bl	8000ab4 <__aeabi_d2iz>
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	f843 0b04 	str.w	r0, [r3], #4
 8005c0e:	3d01      	subs	r5, #1
 8005c10:	9302      	str	r3, [sp, #8]
 8005c12:	ab70      	add	r3, sp, #448	; 0x1c0
 8005c14:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	4649      	mov	r1, r9
 8005c20:	f7fa faf8 	bl	8000214 <__adddf3>
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	e75b      	b.n	8005ae2 <__kernel_rem_pio2+0x10a>
 8005c2a:	d105      	bne.n	8005c38 <__kernel_rem_pio2+0x260>
 8005c2c:	1e63      	subs	r3, r4, #1
 8005c2e:	aa0c      	add	r2, sp, #48	; 0x30
 8005c30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005c34:	15c3      	asrs	r3, r0, #23
 8005c36:	e79b      	b.n	8005b70 <__kernel_rem_pio2+0x198>
 8005c38:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <__kernel_rem_pio2+0x344>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f7fa ff26 	bl	8000a8c <__aeabi_dcmpge>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d139      	bne.n	8005cb8 <__kernel_rem_pio2+0x2e0>
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa feff 	bl	8000a50 <__aeabi_dcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f000 80b4 	beq.w	8005dc0 <__kernel_rem_pio2+0x3e8>
 8005c58:	f104 3bff 	add.w	fp, r4, #4294967295
 8005c5c:	465b      	mov	r3, fp
 8005c5e:	2200      	movs	r2, #0
 8005c60:	9904      	ldr	r1, [sp, #16]
 8005c62:	428b      	cmp	r3, r1
 8005c64:	da65      	bge.n	8005d32 <__kernel_rem_pio2+0x35a>
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	d07b      	beq.n	8005d62 <__kernel_rem_pio2+0x38a>
 8005c6a:	ab0c      	add	r3, sp, #48	; 0x30
 8005c6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005c70:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a0 	beq.w	8005dba <__kernel_rem_pio2+0x3e2>
 8005c7a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005d00 <__kernel_rem_pio2+0x328>
 8005c7e:	4650      	mov	r0, sl
 8005c80:	f000 fb32 	bl	80062e8 <scalbn>
 8005c84:	4f23      	ldr	r7, [pc, #140]	; (8005d14 <__kernel_rem_pio2+0x33c>)
 8005c86:	ec55 4b10 	vmov	r4, r5, d0
 8005c8a:	46d8      	mov	r8, fp
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	f280 80cf 	bge.w	8005e34 <__kernel_rem_pio2+0x45c>
 8005c96:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005cf8 <__kernel_rem_pio2+0x320>
 8005c9a:	465f      	mov	r7, fp
 8005c9c:	f04f 0800 	mov.w	r8, #0
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f2c0 80fd 	blt.w	8005ea0 <__kernel_rem_pio2+0x4c8>
 8005ca6:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ca8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005d20 <__kernel_rem_pio2+0x348>
 8005cac:	ec55 4b18 	vmov	r4, r5, d8
 8005cb0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	e0e5      	b.n	8005e84 <__kernel_rem_pio2+0x4ac>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	9302      	str	r3, [sp, #8]
 8005cbc:	e75c      	b.n	8005b78 <__kernel_rem_pio2+0x1a0>
 8005cbe:	f8db 3000 	ldr.w	r3, [fp]
 8005cc2:	b955      	cbnz	r5, 8005cda <__kernel_rem_pio2+0x302>
 8005cc4:	b123      	cbz	r3, 8005cd0 <__kernel_rem_pio2+0x2f8>
 8005cc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005cca:	f8cb 3000 	str.w	r3, [fp]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	3201      	adds	r2, #1
 8005cd2:	f10b 0b04 	add.w	fp, fp, #4
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	e755      	b.n	8005b86 <__kernel_rem_pio2+0x1ae>
 8005cda:	1acb      	subs	r3, r1, r3
 8005cdc:	f8cb 3000 	str.w	r3, [fp]
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	e7f5      	b.n	8005cd0 <__kernel_rem_pio2+0x2f8>
 8005ce4:	1e62      	subs	r2, r4, #1
 8005ce6:	ab0c      	add	r3, sp, #48	; 0x30
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005cf0:	a90c      	add	r1, sp, #48	; 0x30
 8005cf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005cf6:	e754      	b.n	8005ba2 <__kernel_rem_pio2+0x1ca>
	...
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	080065f8 	.word	0x080065f8
 8005d0c:	40200000 	.word	0x40200000
 8005d10:	3ff00000 	.word	0x3ff00000
 8005d14:	3e700000 	.word	0x3e700000
 8005d18:	41700000 	.word	0x41700000
 8005d1c:	3fe00000 	.word	0x3fe00000
 8005d20:	080065b8 	.word	0x080065b8
 8005d24:	1e62      	subs	r2, r4, #1
 8005d26:	ab0c      	add	r3, sp, #48	; 0x30
 8005d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d30:	e7de      	b.n	8005cf0 <__kernel_rem_pio2+0x318>
 8005d32:	a90c      	add	r1, sp, #48	; 0x30
 8005d34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	e790      	b.n	8005c60 <__kernel_rem_pio2+0x288>
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d0fa      	beq.n	8005d3e <__kernel_rem_pio2+0x366>
 8005d48:	9a08      	ldr	r2, [sp, #32]
 8005d4a:	18e3      	adds	r3, r4, r3
 8005d4c:	18a6      	adds	r6, r4, r2
 8005d4e:	aa20      	add	r2, sp, #128	; 0x80
 8005d50:	1c65      	adds	r5, r4, #1
 8005d52:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005d56:	9302      	str	r3, [sp, #8]
 8005d58:	9b02      	ldr	r3, [sp, #8]
 8005d5a:	42ab      	cmp	r3, r5
 8005d5c:	da04      	bge.n	8005d68 <__kernel_rem_pio2+0x390>
 8005d5e:	461c      	mov	r4, r3
 8005d60:	e6b5      	b.n	8005ace <__kernel_rem_pio2+0xf6>
 8005d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d64:	2301      	movs	r3, #1
 8005d66:	e7eb      	b.n	8005d40 <__kernel_rem_pio2+0x368>
 8005d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d6e:	f7fa fb9d 	bl	80004ac <__aeabi_i2d>
 8005d72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d78:	46b3      	mov	fp, r6
 8005d7a:	461c      	mov	r4, r3
 8005d7c:	2700      	movs	r7, #0
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	f04f 0900 	mov.w	r9, #0
 8005d86:	9b06      	ldr	r3, [sp, #24]
 8005d88:	429f      	cmp	r7, r3
 8005d8a:	dd06      	ble.n	8005d9a <__kernel_rem_pio2+0x3c2>
 8005d8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8005d8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005d92:	e9c3 8900 	strd	r8, r9, [r3]
 8005d96:	3501      	adds	r5, #1
 8005d98:	e7de      	b.n	8005d58 <__kernel_rem_pio2+0x380>
 8005d9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005d9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005da2:	f7fa fbed 	bl	8000580 <__aeabi_dmul>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4640      	mov	r0, r8
 8005dac:	4649      	mov	r1, r9
 8005dae:	f7fa fa31 	bl	8000214 <__adddf3>
 8005db2:	3701      	adds	r7, #1
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	e7e5      	b.n	8005d86 <__kernel_rem_pio2+0x3ae>
 8005dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005dbe:	e754      	b.n	8005c6a <__kernel_rem_pio2+0x292>
 8005dc0:	ec47 6b10 	vmov	d0, r6, r7
 8005dc4:	f1ca 0000 	rsb	r0, sl, #0
 8005dc8:	f000 fa8e 	bl	80062e8 <scalbn>
 8005dcc:	ec57 6b10 	vmov	r6, r7, d0
 8005dd0:	4b9f      	ldr	r3, [pc, #636]	; (8006050 <__kernel_rem_pio2+0x678>)
 8005dd2:	ee10 0a10 	vmov	r0, s0
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4639      	mov	r1, r7
 8005dda:	f7fa fe57 	bl	8000a8c <__aeabi_dcmpge>
 8005dde:	b300      	cbz	r0, 8005e22 <__kernel_rem_pio2+0x44a>
 8005de0:	4b9c      	ldr	r3, [pc, #624]	; (8006054 <__kernel_rem_pio2+0x67c>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fbca 	bl	8000580 <__aeabi_dmul>
 8005dec:	f7fa fe62 	bl	8000ab4 <__aeabi_d2iz>
 8005df0:	4605      	mov	r5, r0
 8005df2:	f7fa fb5b 	bl	80004ac <__aeabi_i2d>
 8005df6:	4b96      	ldr	r3, [pc, #600]	; (8006050 <__kernel_rem_pio2+0x678>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f7fa fbc1 	bl	8000580 <__aeabi_dmul>
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4602      	mov	r2, r0
 8005e02:	4639      	mov	r1, r7
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7fa fa03 	bl	8000210 <__aeabi_dsub>
 8005e0a:	f7fa fe53 	bl	8000ab4 <__aeabi_d2iz>
 8005e0e:	f104 0b01 	add.w	fp, r4, #1
 8005e12:	ab0c      	add	r3, sp, #48	; 0x30
 8005e14:	f10a 0a18 	add.w	sl, sl, #24
 8005e18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005e1c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005e20:	e72b      	b.n	8005c7a <__kernel_rem_pio2+0x2a2>
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fe45 	bl	8000ab4 <__aeabi_d2iz>
 8005e2a:	ab0c      	add	r3, sp, #48	; 0x30
 8005e2c:	46a3      	mov	fp, r4
 8005e2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005e32:	e722      	b.n	8005c7a <__kernel_rem_pio2+0x2a2>
 8005e34:	ab70      	add	r3, sp, #448	; 0x1c0
 8005e36:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005e3a:	ab0c      	add	r3, sp, #48	; 0x30
 8005e3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005e40:	f7fa fb34 	bl	80004ac <__aeabi_i2d>
 8005e44:	4622      	mov	r2, r4
 8005e46:	462b      	mov	r3, r5
 8005e48:	f7fa fb9a 	bl	8000580 <__aeabi_dmul>
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	e9c9 0100 	strd	r0, r1, [r9]
 8005e52:	463b      	mov	r3, r7
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fb92 	bl	8000580 <__aeabi_dmul>
 8005e5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e60:	4604      	mov	r4, r0
 8005e62:	460d      	mov	r5, r1
 8005e64:	e713      	b.n	8005c8e <__kernel_rem_pio2+0x2b6>
 8005e66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005e6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005e6e:	f7fa fb87 	bl	8000580 <__aeabi_dmul>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa f9cb 	bl	8000214 <__adddf3>
 8005e7e:	3601      	adds	r6, #1
 8005e80:	4604      	mov	r4, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	429e      	cmp	r6, r3
 8005e88:	dc01      	bgt.n	8005e8e <__kernel_rem_pio2+0x4b6>
 8005e8a:	45b0      	cmp	r8, r6
 8005e8c:	daeb      	bge.n	8005e66 <__kernel_rem_pio2+0x48e>
 8005e8e:	ab48      	add	r3, sp, #288	; 0x120
 8005e90:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e94:	e9c3 4500 	strd	r4, r5, [r3]
 8005e98:	3f01      	subs	r7, #1
 8005e9a:	f108 0801 	add.w	r8, r8, #1
 8005e9e:	e6ff      	b.n	8005ca0 <__kernel_rem_pio2+0x2c8>
 8005ea0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	dc0b      	bgt.n	8005ebe <__kernel_rem_pio2+0x4e6>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	dc6e      	bgt.n	8005f88 <__kernel_rem_pio2+0x5b0>
 8005eaa:	d045      	beq.n	8005f38 <__kernel_rem_pio2+0x560>
 8005eac:	9b07      	ldr	r3, [sp, #28]
 8005eae:	f003 0007 	and.w	r0, r3, #7
 8005eb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005eb6:	ecbd 8b02 	vpop	{d8}
 8005eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ebe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d1f3      	bne.n	8005eac <__kernel_rem_pio2+0x4d4>
 8005ec4:	ab48      	add	r3, sp, #288	; 0x120
 8005ec6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8005eca:	46d0      	mov	r8, sl
 8005ecc:	46d9      	mov	r9, fp
 8005ece:	f1b9 0f00 	cmp.w	r9, #0
 8005ed2:	f1a8 0808 	sub.w	r8, r8, #8
 8005ed6:	dc64      	bgt.n	8005fa2 <__kernel_rem_pio2+0x5ca>
 8005ed8:	465c      	mov	r4, fp
 8005eda:	2c01      	cmp	r4, #1
 8005edc:	f1aa 0a08 	sub.w	sl, sl, #8
 8005ee0:	dc7e      	bgt.n	8005fe0 <__kernel_rem_pio2+0x608>
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f1bb 0f01 	cmp.w	fp, #1
 8005eea:	f300 8097 	bgt.w	800601c <__kernel_rem_pio2+0x644>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005ef4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 8099 	bne.w	8006030 <__kernel_rem_pio2+0x658>
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	e9c3 5600 	strd	r5, r6, [r3]
 8005f04:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005f08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005f0c:	e7ce      	b.n	8005eac <__kernel_rem_pio2+0x4d4>
 8005f0e:	ab48      	add	r3, sp, #288	; 0x120
 8005f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa f97c 	bl	8000214 <__adddf3>
 8005f1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f20:	f1bb 0f00 	cmp.w	fp, #0
 8005f24:	daf3      	bge.n	8005f0e <__kernel_rem_pio2+0x536>
 8005f26:	9b02      	ldr	r3, [sp, #8]
 8005f28:	b113      	cbz	r3, 8005f30 <__kernel_rem_pio2+0x558>
 8005f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f2e:	4619      	mov	r1, r3
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	e9c3 0100 	strd	r0, r1, [r3]
 8005f36:	e7b9      	b.n	8005eac <__kernel_rem_pio2+0x4d4>
 8005f38:	2000      	movs	r0, #0
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	e7f0      	b.n	8005f20 <__kernel_rem_pio2+0x548>
 8005f3e:	ab48      	add	r3, sp, #288	; 0x120
 8005f40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f964 	bl	8000214 <__adddf3>
 8005f4c:	3c01      	subs	r4, #1
 8005f4e:	2c00      	cmp	r4, #0
 8005f50:	daf5      	bge.n	8005f3e <__kernel_rem_pio2+0x566>
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	b1e3      	cbz	r3, 8005f90 <__kernel_rem_pio2+0x5b8>
 8005f56:	4602      	mov	r2, r0
 8005f58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f5c:	9c01      	ldr	r4, [sp, #4]
 8005f5e:	e9c4 2300 	strd	r2, r3, [r4]
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005f6a:	f7fa f951 	bl	8000210 <__aeabi_dsub>
 8005f6e:	ad4a      	add	r5, sp, #296	; 0x128
 8005f70:	2401      	movs	r4, #1
 8005f72:	45a3      	cmp	fp, r4
 8005f74:	da0f      	bge.n	8005f96 <__kernel_rem_pio2+0x5be>
 8005f76:	9b02      	ldr	r3, [sp, #8]
 8005f78:	b113      	cbz	r3, 8005f80 <__kernel_rem_pio2+0x5a8>
 8005f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f7e:	4619      	mov	r1, r3
 8005f80:	9b01      	ldr	r3, [sp, #4]
 8005f82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005f86:	e791      	b.n	8005eac <__kernel_rem_pio2+0x4d4>
 8005f88:	465c      	mov	r4, fp
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	e7de      	b.n	8005f4e <__kernel_rem_pio2+0x576>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	e7e2      	b.n	8005f5c <__kernel_rem_pio2+0x584>
 8005f96:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005f9a:	f7fa f93b 	bl	8000214 <__adddf3>
 8005f9e:	3401      	adds	r4, #1
 8005fa0:	e7e7      	b.n	8005f72 <__kernel_rem_pio2+0x59a>
 8005fa2:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005fa6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8005faa:	4620      	mov	r0, r4
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7fa f92f 	bl	8000214 <__adddf3>
 8005fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa f925 	bl	8000210 <__aeabi_dsub>
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	463b      	mov	r3, r7
 8005fca:	f7fa f923 	bl	8000214 <__adddf3>
 8005fce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005fd2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005fd6:	ed88 7b00 	vstr	d7, [r8]
 8005fda:	f109 39ff 	add.w	r9, r9, #4294967295
 8005fde:	e776      	b.n	8005ece <__kernel_rem_pio2+0x4f6>
 8005fe0:	e9da 8900 	ldrd	r8, r9, [sl]
 8005fe4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4632      	mov	r2, r6
 8005fec:	463b      	mov	r3, r7
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa f910 	bl	8000214 <__adddf3>
 8005ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa f906 	bl	8000210 <__aeabi_dsub>
 8006004:	4632      	mov	r2, r6
 8006006:	463b      	mov	r3, r7
 8006008:	f7fa f904 	bl	8000214 <__adddf3>
 800600c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006010:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006014:	ed8a 7b00 	vstr	d7, [sl]
 8006018:	3c01      	subs	r4, #1
 800601a:	e75e      	b.n	8005eda <__kernel_rem_pio2+0x502>
 800601c:	ab48      	add	r3, sp, #288	; 0x120
 800601e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa f8f5 	bl	8000214 <__adddf3>
 800602a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800602e:	e75a      	b.n	8005ee6 <__kernel_rem_pio2+0x50e>
 8006030:	9b01      	ldr	r3, [sp, #4]
 8006032:	9a01      	ldr	r2, [sp, #4]
 8006034:	601d      	str	r5, [r3, #0]
 8006036:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800603a:	605c      	str	r4, [r3, #4]
 800603c:	609f      	str	r7, [r3, #8]
 800603e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006042:	60d3      	str	r3, [r2, #12]
 8006044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006048:	6110      	str	r0, [r2, #16]
 800604a:	6153      	str	r3, [r2, #20]
 800604c:	e72e      	b.n	8005eac <__kernel_rem_pio2+0x4d4>
 800604e:	bf00      	nop
 8006050:	41700000 	.word	0x41700000
 8006054:	3e700000 	.word	0x3e700000

08006058 <__kernel_sin>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	ed2d 8b04 	vpush	{d8-d9}
 8006060:	eeb0 8a41 	vmov.f32	s16, s2
 8006064:	eef0 8a61 	vmov.f32	s17, s3
 8006068:	ec55 4b10 	vmov	r4, r5, d0
 800606c:	b083      	sub	sp, #12
 800606e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006072:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006076:	9001      	str	r0, [sp, #4]
 8006078:	da06      	bge.n	8006088 <__kernel_sin+0x30>
 800607a:	ee10 0a10 	vmov	r0, s0
 800607e:	4629      	mov	r1, r5
 8006080:	f7fa fd18 	bl	8000ab4 <__aeabi_d2iz>
 8006084:	2800      	cmp	r0, #0
 8006086:	d051      	beq.n	800612c <__kernel_sin+0xd4>
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	f7fa fa76 	bl	8000580 <__aeabi_dmul>
 8006094:	4682      	mov	sl, r0
 8006096:	468b      	mov	fp, r1
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa fa6e 	bl	8000580 <__aeabi_dmul>
 80060a4:	a341      	add	r3, pc, #260	; (adr r3, 80061ac <__kernel_sin+0x154>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	4680      	mov	r8, r0
 80060ac:	4689      	mov	r9, r1
 80060ae:	4650      	mov	r0, sl
 80060b0:	4659      	mov	r1, fp
 80060b2:	f7fa fa65 	bl	8000580 <__aeabi_dmul>
 80060b6:	a33f      	add	r3, pc, #252	; (adr r3, 80061b4 <__kernel_sin+0x15c>)
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f7fa f8a8 	bl	8000210 <__aeabi_dsub>
 80060c0:	4652      	mov	r2, sl
 80060c2:	465b      	mov	r3, fp
 80060c4:	f7fa fa5c 	bl	8000580 <__aeabi_dmul>
 80060c8:	a33c      	add	r3, pc, #240	; (adr r3, 80061bc <__kernel_sin+0x164>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f7fa f8a1 	bl	8000214 <__adddf3>
 80060d2:	4652      	mov	r2, sl
 80060d4:	465b      	mov	r3, fp
 80060d6:	f7fa fa53 	bl	8000580 <__aeabi_dmul>
 80060da:	a33a      	add	r3, pc, #232	; (adr r3, 80061c4 <__kernel_sin+0x16c>)
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f7fa f896 	bl	8000210 <__aeabi_dsub>
 80060e4:	4652      	mov	r2, sl
 80060e6:	465b      	mov	r3, fp
 80060e8:	f7fa fa4a 	bl	8000580 <__aeabi_dmul>
 80060ec:	a337      	add	r3, pc, #220	; (adr r3, 80061cc <__kernel_sin+0x174>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f88f 	bl	8000214 <__adddf3>
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	4606      	mov	r6, r0
 80060fa:	460f      	mov	r7, r1
 80060fc:	b9eb      	cbnz	r3, 800613a <__kernel_sin+0xe2>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4650      	mov	r0, sl
 8006104:	4659      	mov	r1, fp
 8006106:	f7fa fa3b 	bl	8000580 <__aeabi_dmul>
 800610a:	a325      	add	r3, pc, #148	; (adr r3, 80061a0 <__kernel_sin+0x148>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa f87e 	bl	8000210 <__aeabi_dsub>
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	f7fa fa32 	bl	8000580 <__aeabi_dmul>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f876 	bl	8000214 <__adddf3>
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	ec45 4b10 	vmov	d0, r4, r5
 8006130:	b003      	add	sp, #12
 8006132:	ecbd 8b04 	vpop	{d8-d9}
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <__kernel_sin+0x150>)
 800613c:	ec51 0b18 	vmov	r0, r1, d8
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa fa1d 	bl	8000580 <__aeabi_dmul>
 8006146:	4632      	mov	r2, r6
 8006148:	ec41 0b19 	vmov	d9, r0, r1
 800614c:	463b      	mov	r3, r7
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fa15 	bl	8000580 <__aeabi_dmul>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	ec51 0b19 	vmov	r0, r1, d9
 800615e:	f7fa f857 	bl	8000210 <__aeabi_dsub>
 8006162:	4652      	mov	r2, sl
 8006164:	465b      	mov	r3, fp
 8006166:	f7fa fa0b 	bl	8000580 <__aeabi_dmul>
 800616a:	ec53 2b18 	vmov	r2, r3, d8
 800616e:	f7fa f84f 	bl	8000210 <__aeabi_dsub>
 8006172:	a30b      	add	r3, pc, #44	; (adr r3, 80061a0 <__kernel_sin+0x148>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	4606      	mov	r6, r0
 800617a:	460f      	mov	r7, r1
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa f9fe 	bl	8000580 <__aeabi_dmul>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4630      	mov	r0, r6
 800618a:	4639      	mov	r1, r7
 800618c:	f7fa f842 	bl	8000214 <__adddf3>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4620      	mov	r0, r4
 8006196:	4629      	mov	r1, r5
 8006198:	f7fa f83a 	bl	8000210 <__aeabi_dsub>
 800619c:	e7c4      	b.n	8006128 <__kernel_sin+0xd0>
 800619e:	bf00      	nop
 80061a0:	55555549 	.word	0x55555549
 80061a4:	3fc55555 	.word	0x3fc55555
 80061a8:	3fe00000 	.word	0x3fe00000
 80061ac:	5acfd57c 	.word	0x5acfd57c
 80061b0:	3de5d93a 	.word	0x3de5d93a
 80061b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80061b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80061bc:	57b1fe7d 	.word	0x57b1fe7d
 80061c0:	3ec71de3 	.word	0x3ec71de3
 80061c4:	19c161d5 	.word	0x19c161d5
 80061c8:	3f2a01a0 	.word	0x3f2a01a0
 80061cc:	1110f8a6 	.word	0x1110f8a6
 80061d0:	3f811111 	.word	0x3f811111

080061d4 <fabs>:
 80061d4:	ec51 0b10 	vmov	r0, r1, d0
 80061d8:	ee10 2a10 	vmov	r2, s0
 80061dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061e0:	ec43 2b10 	vmov	d0, r2, r3
 80061e4:	4770      	bx	lr
	...

080061e8 <floor>:
 80061e8:	ec51 0b10 	vmov	r0, r1, d0
 80061ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80061f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80061f8:	2e13      	cmp	r6, #19
 80061fa:	ee10 5a10 	vmov	r5, s0
 80061fe:	ee10 8a10 	vmov	r8, s0
 8006202:	460c      	mov	r4, r1
 8006204:	dc32      	bgt.n	800626c <floor+0x84>
 8006206:	2e00      	cmp	r6, #0
 8006208:	da14      	bge.n	8006234 <floor+0x4c>
 800620a:	a333      	add	r3, pc, #204	; (adr r3, 80062d8 <floor+0xf0>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f800 	bl	8000214 <__adddf3>
 8006214:	2200      	movs	r2, #0
 8006216:	2300      	movs	r3, #0
 8006218:	f7fa fc42 	bl	8000aa0 <__aeabi_dcmpgt>
 800621c:	b138      	cbz	r0, 800622e <floor+0x46>
 800621e:	2c00      	cmp	r4, #0
 8006220:	da57      	bge.n	80062d2 <floor+0xea>
 8006222:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006226:	431d      	orrs	r5, r3
 8006228:	d001      	beq.n	800622e <floor+0x46>
 800622a:	4c2d      	ldr	r4, [pc, #180]	; (80062e0 <floor+0xf8>)
 800622c:	2500      	movs	r5, #0
 800622e:	4621      	mov	r1, r4
 8006230:	4628      	mov	r0, r5
 8006232:	e025      	b.n	8006280 <floor+0x98>
 8006234:	4f2b      	ldr	r7, [pc, #172]	; (80062e4 <floor+0xfc>)
 8006236:	4137      	asrs	r7, r6
 8006238:	ea01 0307 	and.w	r3, r1, r7
 800623c:	4303      	orrs	r3, r0
 800623e:	d01f      	beq.n	8006280 <floor+0x98>
 8006240:	a325      	add	r3, pc, #148	; (adr r3, 80062d8 <floor+0xf0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7f9 ffe5 	bl	8000214 <__adddf3>
 800624a:	2200      	movs	r2, #0
 800624c:	2300      	movs	r3, #0
 800624e:	f7fa fc27 	bl	8000aa0 <__aeabi_dcmpgt>
 8006252:	2800      	cmp	r0, #0
 8006254:	d0eb      	beq.n	800622e <floor+0x46>
 8006256:	2c00      	cmp	r4, #0
 8006258:	bfbe      	ittt	lt
 800625a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800625e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006262:	19a4      	addlt	r4, r4, r6
 8006264:	ea24 0407 	bic.w	r4, r4, r7
 8006268:	2500      	movs	r5, #0
 800626a:	e7e0      	b.n	800622e <floor+0x46>
 800626c:	2e33      	cmp	r6, #51	; 0x33
 800626e:	dd0b      	ble.n	8006288 <floor+0xa0>
 8006270:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006274:	d104      	bne.n	8006280 <floor+0x98>
 8006276:	ee10 2a10 	vmov	r2, s0
 800627a:	460b      	mov	r3, r1
 800627c:	f7f9 ffca 	bl	8000214 <__adddf3>
 8006280:	ec41 0b10 	vmov	d0, r0, r1
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800628c:	f04f 33ff 	mov.w	r3, #4294967295
 8006290:	fa23 f707 	lsr.w	r7, r3, r7
 8006294:	4207      	tst	r7, r0
 8006296:	d0f3      	beq.n	8006280 <floor+0x98>
 8006298:	a30f      	add	r3, pc, #60	; (adr r3, 80062d8 <floor+0xf0>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7f9 ffb9 	bl	8000214 <__adddf3>
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	f7fa fbfb 	bl	8000aa0 <__aeabi_dcmpgt>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0bf      	beq.n	800622e <floor+0x46>
 80062ae:	2c00      	cmp	r4, #0
 80062b0:	da02      	bge.n	80062b8 <floor+0xd0>
 80062b2:	2e14      	cmp	r6, #20
 80062b4:	d103      	bne.n	80062be <floor+0xd6>
 80062b6:	3401      	adds	r4, #1
 80062b8:	ea25 0507 	bic.w	r5, r5, r7
 80062bc:	e7b7      	b.n	800622e <floor+0x46>
 80062be:	2301      	movs	r3, #1
 80062c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80062c4:	fa03 f606 	lsl.w	r6, r3, r6
 80062c8:	4435      	add	r5, r6
 80062ca:	4545      	cmp	r5, r8
 80062cc:	bf38      	it	cc
 80062ce:	18e4      	addcc	r4, r4, r3
 80062d0:	e7f2      	b.n	80062b8 <floor+0xd0>
 80062d2:	2500      	movs	r5, #0
 80062d4:	462c      	mov	r4, r5
 80062d6:	e7aa      	b.n	800622e <floor+0x46>
 80062d8:	8800759c 	.word	0x8800759c
 80062dc:	7e37e43c 	.word	0x7e37e43c
 80062e0:	bff00000 	.word	0xbff00000
 80062e4:	000fffff 	.word	0x000fffff

080062e8 <scalbn>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	ec55 4b10 	vmov	r4, r5, d0
 80062ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80062f2:	4606      	mov	r6, r0
 80062f4:	462b      	mov	r3, r5
 80062f6:	b99a      	cbnz	r2, 8006320 <scalbn+0x38>
 80062f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062fc:	4323      	orrs	r3, r4
 80062fe:	d036      	beq.n	800636e <scalbn+0x86>
 8006300:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <scalbn+0x100>)
 8006302:	4629      	mov	r1, r5
 8006304:	ee10 0a10 	vmov	r0, s0
 8006308:	2200      	movs	r2, #0
 800630a:	f7fa f939 	bl	8000580 <__aeabi_dmul>
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <scalbn+0x104>)
 8006310:	429e      	cmp	r6, r3
 8006312:	4604      	mov	r4, r0
 8006314:	460d      	mov	r5, r1
 8006316:	da10      	bge.n	800633a <scalbn+0x52>
 8006318:	a32b      	add	r3, pc, #172	; (adr r3, 80063c8 <scalbn+0xe0>)
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	e03a      	b.n	8006396 <scalbn+0xae>
 8006320:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006324:	428a      	cmp	r2, r1
 8006326:	d10c      	bne.n	8006342 <scalbn+0x5a>
 8006328:	ee10 2a10 	vmov	r2, s0
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	f7f9 ff70 	bl	8000214 <__adddf3>
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	e019      	b.n	800636e <scalbn+0x86>
 800633a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800633e:	460b      	mov	r3, r1
 8006340:	3a36      	subs	r2, #54	; 0x36
 8006342:	4432      	add	r2, r6
 8006344:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006348:	428a      	cmp	r2, r1
 800634a:	dd08      	ble.n	800635e <scalbn+0x76>
 800634c:	2d00      	cmp	r5, #0
 800634e:	a120      	add	r1, pc, #128	; (adr r1, 80063d0 <scalbn+0xe8>)
 8006350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006354:	da1c      	bge.n	8006390 <scalbn+0xa8>
 8006356:	a120      	add	r1, pc, #128	; (adr r1, 80063d8 <scalbn+0xf0>)
 8006358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635c:	e018      	b.n	8006390 <scalbn+0xa8>
 800635e:	2a00      	cmp	r2, #0
 8006360:	dd08      	ble.n	8006374 <scalbn+0x8c>
 8006362:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006366:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800636a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800636e:	ec45 4b10 	vmov	d0, r4, r5
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006378:	da19      	bge.n	80063ae <scalbn+0xc6>
 800637a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800637e:	429e      	cmp	r6, r3
 8006380:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006384:	dd0a      	ble.n	800639c <scalbn+0xb4>
 8006386:	a112      	add	r1, pc, #72	; (adr r1, 80063d0 <scalbn+0xe8>)
 8006388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e2      	bne.n	8006356 <scalbn+0x6e>
 8006390:	a30f      	add	r3, pc, #60	; (adr r3, 80063d0 <scalbn+0xe8>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7fa f8f3 	bl	8000580 <__aeabi_dmul>
 800639a:	e7cb      	b.n	8006334 <scalbn+0x4c>
 800639c:	a10a      	add	r1, pc, #40	; (adr r1, 80063c8 <scalbn+0xe0>)
 800639e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0b8      	beq.n	8006318 <scalbn+0x30>
 80063a6:	a10e      	add	r1, pc, #56	; (adr r1, 80063e0 <scalbn+0xf8>)
 80063a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ac:	e7b4      	b.n	8006318 <scalbn+0x30>
 80063ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063b2:	3236      	adds	r2, #54	; 0x36
 80063b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80063bc:	4620      	mov	r0, r4
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <scalbn+0x108>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	e7e8      	b.n	8006396 <scalbn+0xae>
 80063c4:	f3af 8000 	nop.w
 80063c8:	c2f8f359 	.word	0xc2f8f359
 80063cc:	01a56e1f 	.word	0x01a56e1f
 80063d0:	8800759c 	.word	0x8800759c
 80063d4:	7e37e43c 	.word	0x7e37e43c
 80063d8:	8800759c 	.word	0x8800759c
 80063dc:	fe37e43c 	.word	0xfe37e43c
 80063e0:	c2f8f359 	.word	0xc2f8f359
 80063e4:	81a56e1f 	.word	0x81a56e1f
 80063e8:	43500000 	.word	0x43500000
 80063ec:	ffff3cb0 	.word	0xffff3cb0
 80063f0:	3c900000 	.word	0x3c900000

080063f4 <_init>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr

08006400 <_fini>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr
